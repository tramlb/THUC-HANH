%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Mountain travel man retro emblem.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: German
%%CreationDate: 1/14/2016
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2016-01-14T14:40:59+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-01-14T14:40:58+03:00</xmp:CreateDate>
         <xmp:MetadataDate>2016-01-14T14:40:59+03:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9C5qHPdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVUL27hsrK4vJyRDbRvNKQKnjGpZqD5DEC1JdZXcN7ZW95ASY&#xA;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&#xA;Yq7FXYq7FXYq7FX/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:75B1FC7AB3BAE51188A7DEFE25698802</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:75B1FC7AB3BAE51188A7DEFE25698802</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:74B1FC7AB3BAE51188A7DEFE25698802</stRef:instanceID>
            <stRef:documentID>xmp.did:74B1FC7AB3BAE51188A7DEFE25698802</stRef:documentID>
            <stRef:originalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:73B1FC7AB3BAE51188A7DEFE25698802</stEvt:instanceID>
                  <stEvt:when>2016-01-14T14:39:32+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74B1FC7AB3BAE51188A7DEFE25698802</stEvt:instanceID>
                  <stEvt:when>2016-01-14T14:40:24+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:75B1FC7AB3BAE51188A7DEFE25698802</stEvt:instanceID>
                  <stEvt:when>2016-01-14T14:40:59+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF Library 9.9</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
[1 0 0 1 0 0 ]ct
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.941176 .878431 .74902 rgb
f
250.448 212.846 mo
248.774 215.875 246.773 216.653 244.58 214.663 cv
245.695 212.791 246.832 210.979 247.891 209.34 cv
249.954 206.144 250.86 204.505 251.896 200.588 cv
251.803 203.834 252.066 209.919 250.448 212.846 cv
cp
230.476 159.236 mo
233.423 158.62 236.723 157.736 239.821 158.785 cv
242.521 159.698 244.879 161.467 247.568 162.451 cv
243.516 161.145 235.396 158.3 230.476 159.236 cv
cp
209.444 219.772 mo
206.834 225.378 201.939 230.531 199.504 236.053 cv
197.115 241.459 197.56 249.756 197.62 255.82 cv
197.646 258.508 198.684 262.492 198.223 265.264 cv
198.195 265.412 198.163 265.533 198.134 265.664 cv
186.189 195.164 li
188.696 196.618 192.83 197.017 194.804 197.426 cv
199.019 198.293 201.052 198.526 203.011 195.199 cv
204.831 193.441 206.691 190.21 208.392 187.189 cv
208.56 187.881 208.685 188.59 208.722 189.325 cv
209.018 195.144 209.729 200.051 211.392 205.562 cv
213.194 211.539 211.998 214.292 209.444 219.772 cv
cp
271.538 147.299 mo
271.981 145.804 271.941 145.612 271.725 145.086 cv
271.051 144.873 270.794 145.122 270.305 146.214 cv
270.956 144.542 271.272 143.24 270.476 142.947 cv
270.218 142.811 269.755 143.533 269.263 144.481 cv
269.425 143.825 269.476 143.049 268.809 143.174 cv
268.476 143.174 265.339 149.024 265.036 149.13 cv
264.544 148.08 264.753 147.784 264.826 146.945 cv
264.653 146.457 264.653 146.457 264.345 146.358 cv
263.559 147.403 262.643 149.195 263.559 152.07 cv
264.122 153.838 264.752 152.945 264.122 153.838 cv
262.57 152.788 260.218 153.555 259.414 154.482 cv
257.521 156.668 255.981 157.948 253.548 160.179 cv
253.772 159.545 253.963 158.77 254.165 157.792 cv
254.836 154.543 251.458 151.806 248.407 151.722 cv
248.445 152.214 248.474 152.706 248.476 153.199 cv
248.482 155.071 248.275 157.528 248.318 159.097 cv
247.514 156.623 246.694 153.171 246.643 150.57 cv
246.604 149.832 li
245.47 146.215 245.772 143.311 240.966 140.794 cv
237.828 139.152 230.788 138.541 228.289 138.79 cv
227.017 138.477 224.585 139.391 223.253 140.127 cv
222.034 140.608 221.199 138.865 220.364 142.997 cv
220.622 143.142 220.872 143.298 221.101 143.483 cv
221.808 144.056 222.433 144.938 222.882 145.73 cv
223.355 146.566 223.54 147.595 224.101 148.361 cv
224.685 149.159 225.283 149.227 226.057 149.742 cv
224.519 149.431 223.135 148.839 222.226 147.361 cv
221.61 146.36 221.215 144.929 220.11 144.43 cv
220.106 144.45 220.104 144.466 220.101 144.486 cv
220.208 144.729 220.263 144.844 220.208 144.729 cv
220.061 144.56 219.822 144.407 219.517 144.272 cv
219.419 144.261 219.333 144.235 219.226 144.236 cv
219.18 144.149 li
216.8 143.325 211.517 143.445 209.601 145.713 cv
207.813 147.827 208.351 150.236 205.201 151.994 cv
207.297 154.511 206.431 153.888 208.332 154.165 cv
208.708 157.203 209.484 160.655 211.655 162.903 cv
210.538 165.229 207.84 164.636 206.656 166.626 cv
205.893 167.905 205.795 168.999 205.999 170.08 cv
202.792 175.222 199.73 180.321 197.088 185.813 cv
194.746 185.938 192.382 185.535 189.974 186.228 cv
189.33 186.417 188.569 186.723 187.811 187.127 cv
187.175 186.714 186.346 186.422 185.454 186.279 cv
185.599 183.36 185.77 178.755 182.02 180.18 cv
179.483 181.145 180.445 184.063 181.63 186.647 cv
180.397 187.144 179.312 188.493 179.726 189.903 cv
181.23 195.033 180.961 195.581 183.965 195.503 cv
197.706 276.609 li
196.974 281.352 193.649 284.107 188.075 284.736 cv
187.234 291.104 204.161 285.549 206.674 283.602 cv
206.573 280.896 207.399 278.463 207.226 275.736 cv
207.059 273.209 207.647 272.02 208.169 269.295 cv
209.154 264.182 208.117 259.973 208.884 255.027 cv
209.393 251.721 208.779 248.51 210.7 245.711 cv
212.018 243.781 211.562 243.596 213.101 241.861 cv
215.094 239.607 215.2 238.58 217.075 236.311 cv
218.644 234.412 225.585 228.156 227.219 226.088 cv
227.219 226.088 229.146 241.15 229.139 244.111 cv
229.129 249.076 229.08 251.939 229.309 256.752 cv
229.55 261.801 228.546 268.713 229.101 273.736 cv
229.351 275.986 230.667 275.021 230.752 277.135 cv
229.842 279.658 229.063 282.586 229.476 285.236 cv
229.586 285.945 229.73 286.527 229.9 287.01 cv
229.653 288.166 229.814 289.252 230.99 290.137 cv
232.384 291.186 233.901 290.713 235.381 289.957 cv
237.234 290.082 239.06 290.033 240.824 289.221 cv
240.887 288.795 240.908 288.336 240.885 287.887 cv
241.007 287.57 li
236.522 275.912 243.976 277.611 242.465 251.619 cv
242.109 245.508 242.992 236.52 243.101 230.236 cv
243.137 228.092 242.873 221.324 242.602 217.803 cv
243.514 215.853 242.768 217.775 243.886 215.845 cv
246.073 218.603 249.758 219.505 252.792 215.71 cv
256.521 211.046 254.429 201.325 253.307 194.862 cv
254.583 187.967 254.063 185.384 253.102 178.486 cv
255.596 178.682 258.737 174.283 260.739 172.181 cv
262.767 170.052 263.285 168.378 265.584 164.978 cv
267.023 163.512 267.529 161.137 268.16 159.249 cv
268.726 157.736 268.342 157.034 267.553 156.297 cv
268.101 155.487 267.415 155.773 268.351 155.143 cv
269.788 154.174 271.252 150.498 272.132 148.549 cv
272.775 147.122 271.929 146.996 271.538 147.299 cv
cp
.25098 .25098 .25098 rgb
f
114.323 192 mo
114.229 192 114.323 192 113.218 192 cv
70 192 li
68.7104 192 68.7104 194 70 194 cv
113.082 194 li
114.187 194 115.107 193.626 115.132 193.167 cv
115.146 192.891 115.132 192 114.323 192 cv
cp
f
120.529 192 mo
119.424 192 118.548 192.308 118.563 192.687 cv
118.578 193.066 118.523 193.864 119.24 193.91 cv
120.65 194 119.546 194 120.65 194 cv
141 194 li
142.29 194 142.29 192 141 192 cv
120.529 192 li
cp
f
327.167 192 mo
309 192 li
307.71 192 307.71 194 309 194 cv
327.167 194 li
328.271 194 329.167 193.552 329.167 193 cv
329.167 192.448 328.271 192 327.167 192 cv
cp
f
334.694 192 mo
333.59 192 332.653 192.317 332.596 192.708 cv
332.538 193.098 332.592 193.667 333.238 193.899 cv
333.834 194.113 333.623 194 334.728 194 cv
380 194 li
381.29 194 381.29 192 380 192 cv
334.694 192 li
cp
f
113.236 222.054 mo
95.6167 226.775 li
94.542 227.063 94.9893 228.729 96.0635 228.441 cv
114.191 223.584 li
115.258 223.298 115.898 222.731 115.633 222.31 cv
115.368 221.888 114.303 221.769 113.236 222.054 cv
cp
f
120.706 220.053 mo
119.639 220.338 118.901 220.936 119.057 221.387 cv
119.212 221.839 120.2 221.974 121.267 221.688 cv
155.227 212.589 li
156.302 212.301 155.855 210.634 154.781 210.922 cv
120.706 220.053 li
cp
f
325.089 165.288 mo
294.773 173.412 li
293.698 173.7 294.145 175.366 295.22 175.078 cv
325.495 166.965 li
326.562 166.68 327.319 166.077 327.207 165.613 cv
327.096 165.15 326.155 165.002 325.089 165.288 cv
cp
f
332.599 163.276 mo
331.532 163.562 330.783 164.162 330.926 164.616 cv
331.068 165.071 332.047 165.209 333.113 164.924 cv
354.383 159.225 li
355.458 158.937 355.012 157.271 353.937 157.558 cv
332.599 163.276 li
cp
f
112.732 256.664 mo
90.2661 269.635 li
89.1489 270.278 90.1494 272.011 91.2661 271.366 cv
113.907 258.295 li
114.864 257.742 115.35 256.949 115.026 256.498 cv
114.703 256.047 113.689 256.111 112.732 256.664 cv
cp
f
119.566 252.719 mo
118.61 253.271 118.083 254.093 118.395 254.55 cv
118.707 255.007 119.743 254.926 120.7 254.373 cv
152.754 235.866 li
153.871 235.222 152.871 233.489 151.754 234.135 cv
119.566 252.719 li
cp
f
313.261 140.888 mo
297.246 150.134 li
296.129 150.779 297.129 152.511 298.246 151.866 cv
314.306 142.594 li
315.263 142.042 315.785 141.224 315.498 140.752 cv
315.211 140.28 314.218 140.336 313.261 140.888 cv
cp
f
319.487 137.294 mo
318 138.25 318.264 139.004 318.45 139.224 cv
318.759 139.588 319.801 139.421 320.758 138.869 cv
359.734 116.366 li
360.852 115.721 359.852 113.989 358.734 114.634 cv
319.487 137.294 li
cp
f
153.661 263.119 mo
129.838 286.942 li
129.051 287.728 130.272 288.948 131.059 288.161 cv
155.035 264.186 li
155.815 263.404 156.143 262.53 155.764 262.236 cv
155.384 261.941 154.442 262.338 153.661 263.119 cv
cp
f
158.61 258.17 mo
157.83 258.951 157.505 259.82 157.885 260.115 cv
158.264 260.409 159.203 260.018 159.984 259.236 cv
174.369 244.852 li
175.156 244.064 173.936 242.845 173.149 243.631 cv
158.61 258.17 li
cp
f
288.094 128.687 mo
287.313 129.467 286.882 130.439 287.152 130.842 cv
287.423 131.245 288.294 130.926 289.075 130.146 cv
320.162 99.0586 li
320.949 98.2715 319.729 97.0518 318.941 97.8379 cv
288.094 128.687 li
cp
f
282.987 133.793 mo
275.631 141.149 li
274.844 141.937 276.064 143.156 276.852 142.37 cv
284.103 135.119 li
284.884 134.338 285.265 133.409 284.957 133.043 cv
284.649 132.676 283.769 133.012 282.987 133.793 cv
cp
f
171.942 285.325 mo
171.712 285.201 171.48 285.08 171.243 284.962 cv
171.176 284.929 170.45 285.485 169.897 286.442 cv
158.853 305.573 li
158.853 306.5 162.375 303.5 163.135 302.154 cv
171.629 287.442 li
172.182 286.485 172.325 285.532 171.942 285.325 cv
cp
f
173.905 279.5 mo
173.353 280.457 173.111 281.318 173.365 281.426 cv
173.515 281.489 173.668 281.554 173.824 281.62 cv
173.978 281.686 174.135 281.751 174.294 281.816 cv
174.554 281.924 175.213 281.235 175.765 280.278 cv
183.866 266.247 li
184.511 265.13 182.779 264.13 182.134 265.247 cv
173.905 279.5 li
cp
f
284.105 88.6255 mo
266.134 119.754 li
265.488 120.872 267.222 121.871 267.866 120.754 cv
285.57 90.0903 li
286.123 89.1338 286.242 88.0303 285.838 87.626 cv
285.434 87.2217 284.658 87.6689 284.105 88.6255 cv
cp
f
288.146 81.627 mo
287.594 82.5835 287.474 83.687 287.879 84.0913 cv
288.283 84.4956 289.059 84.0479 289.611 83.0913 cv
303.367 59.2656 li
304.012 58.1489 302.279 57.1489 301.634 58.2656 cv
288.146 81.627 li
cp
f
252.52 86.9595 mo
242.922 122.781 li
242.634 123.856 244.301 124.302 244.589 123.228 cv
254.102 87.7251 li
254.388 86.6582 254.271 85.6104 253.834 85.3984 cv
253.397 85.1865 252.806 85.8926 252.52 86.9595 cv
cp
f
254.334 80.189 mo
254.048 81.2559 254.177 82.2734 254.615 82.4766 cv
255.055 82.6797 255.638 81.9912 255.924 80.9243 cv
260.442 64.063 li
260.729 62.9883 259.063 62.542 258.774 63.6167 cv
254.334 80.189 li
cp
f
224 84.2402 mo
224 109.001 li
224 110.291 226 110.29 226 109 cv
226 84.4551 li
226.001 82.9585 225.427 82.2876 225 82.2876 cv
224.25 82.2876 224 83.1357 224 84.2402 cv
cp
f
225 78.1509 mo
225.369 78.1509 226 77.875 226 75.5 cv
226.001 37.999 li
226 36.7095 224 36.71 224 38 cv
224 75.6758 li
224 77.3335 224.632 78.1509 225 78.1509 cv
cp
f
244.871 263.825 mo
244.686 263.834 244.503 263.834 244.333 263.834 cv
244.324 263.834 244.319 263.83 244.311 263.83 cv
244.133 264.73 243.959 265.633 243.813 266.54 cv
248.13 282.65 li
248.766 282.808 249.4 282.962 250.038 283.109 cv
244.871 263.825 li
cp
f
201 100.095 mo
191.226 63.6157 li
190.937 62.5415 189.271 62.9883 189.558 64.0635 cv
199.359 100.642 li
199.645 101.708 200.244 102.451 200.697 102.3 cv
201.15 102.148 201.285 101.162 201 100.095 cv
cp
f
202.984 107.501 mo
202.698 106.435 202.107 105.724 201.662 105.906 cv
201.217 106.088 201.094 107.114 201.379 108.181 cv
205.411 123.228 li
205.699 124.303 207.366 123.855 207.078 122.781 cv
202.984 107.501 li
cp
f
285.43 298.263 mo
286.139 298.613 287.544 300.125 287.544 299.332 cv
279.468 285.342 li
278.915 284.385 277.998 284.23 277.704 284.622 cv
277.41 285.013 277.585 286.078 278.138 287.035 cv
284.034 297.248 li
284.499 297.586 284.965 297.924 285.43 298.263 cv
cp
f
275.381 278.262 mo
267.867 265.247 li
267.223 264.13 265.489 265.13 266.136 266.247 cv
273.768 279.465 li
274.32 280.422 275.143 280.947 275.592 280.619 cv
276.041 280.292 275.934 279.219 275.381 278.262 cv
cp
f
170.22 96.1172 mo
148.366 58.2646 li
147.721 57.1484 145.989 58.1484 146.633 59.2666 cv
168.592 97.3003 li
169.144 98.2568 169.945 98.7515 170.395 98.4238 cv
170.844 98.0962 170.772 97.0737 170.22 96.1172 cv
cp
f
173.729 102.194 mo
173.176 101.238 172.732 101.059 172.375 100.833 cv
172.062 100.634 171.295 100.907 171.296 101.505 cv
171.297 102 171.551 102.424 172.103 103.381 cv
182.134 120.755 li
182.779 121.872 184.511 120.871 183.866 119.754 cv
173.729 102.194 li
cp
f
285.622 252.402 mo
276.852 243.631 li
276.065 242.845 274.845 244.064 275.632 244.852 cv
284.41 253.63 li
285.191 254.411 286.097 254.77 286.432 254.432 cv
286.767 254.093 286.403 253.184 285.622 252.402 cv
cp
f
290.581 257.361 mo
289.8 256.58 288.896 256.223 288.56 256.56 cv
288.223 256.896 288.582 257.802 289.363 258.583 cv
318.943 288.161 li
319.728 288.949 320.947 287.729 320.161 286.942 cv
290.581 257.361 li
cp
f
140.689 108.252 mo
140.707 108.237 140.715 108.23 140.728 108.22 cv
140.763 108.093 140.78 107.983 140.782 107.849 cv
140.766 107.755 140.74 107.654 140.694 107.526 cv
140.683 107.494 140.663 107.469 140.65 107.437 cv
140.446 107.228 140.216 106.995 139.96 106.739 cv
131.059 97.8374 li
130.271 97.0513 129.052 98.271 129.838 99.0591 cv
138.215 107.437 li
138.996 108.217 139.84 108.739 140.102 108.608 cv
140.263 108.528 140.419 108.451 140.569 108.375 cv
140.608 108.334 140.643 108.291 140.689 108.252 cv
cp
f
144.923 111.703 mo
144.143 110.922 143.235 110.562 142.904 110.905 cv
142.573 111.249 142.95 112.171 143.73 112.952 cv
173.149 142.37 li
173.936 143.157 175.156 141.936 174.37 141.149 cv
144.923 111.703 li
cp
f
331.288 253.212 mo
298.248 234.134 li
297.131 233.489 296.13 235.222 297.248 235.866 cv
330.005 254.778 li
330.962 255.331 332.049 255.449 332.406 255.019 cv
332.763 254.587 332.245 253.764 331.288 253.212 cv
cp
f
338.988 257.657 mo
338.031 257.105 337.021 257.015 336.743 257.464 cv
336.576 257.733 336.125 258.125 336.928 258.774 cv
336.939 258.783 336.938 258.763 336.928 258.774 cv
336.911 258.793 336.928 258.774 337.885 259.327 cv
358.736 271.365 li
359.851 272.012 360.85 270.279 359.733 269.636 cv
338.988 257.657 li
cp
f
106.372 125.625 mo
106.397 125.615 106.423 125.609 106.447 125.6 cv
106.468 125.581 106.714 125.457 106.713 125.458 cv
106.736 125.443 107.079 125.158 106.886 125.343 cv
106.943 125.292 106.996 125.235 107.048 125.178 cv
107.059 125.159 107.071 125.139 107.108 125.083 cv
107.133 125.036 107.15 125.007 107.163 124.988 cv
107.167 124.963 107.173 124.927 107.185 124.875 cv
107.208 124.767 107.21 124.607 107.203 124.43 cv
107.192 124.401 107.189 124.383 107.178 124.354 cv
107.081 124.103 106.955 123.855 106.813 123.613 cv
106.594 123.484 106.352 123.342 106.092 123.193 cv
91.2656 114.633 li
90.1489 113.989 89.1489 115.721 90.2661 116.367 cv
105.063 124.91 li
105.585 125.211 106.047 125.462 106.372 125.625 cv
cp
f
113.09 127.233 mo
112.133 126.681 111.141 126.626 110.841 127.091 cv
110.541 127.556 111.05 128.367 112.007 128.919 cv
151.754 151.867 li
152.872 152.512 153.872 150.779 152.754 150.134 cv
113.09 127.233 li
cp
f
309.771 214.821 mo
295.221 210.922 li
294.146 210.634 293.699 212.301 294.774 212.588 cv
309.353 216.494 li
310.419 216.78 311.378 216.637 311.493 216.175 cv
311.608 215.713 310.837 215.107 309.771 214.821 cv
cp
f
317.807 216.975 mo
316.74 216.689 315.658 216.793 315.407 217.219 cv
315.157 217.645 315.836 218.232 316.902 218.518 cv
353.938 228.44 li
355.011 228.73 355.457 227.063 354.383 226.777 cv
317.807 216.975 li
cp
f
132.844 167.414 mo
96.063 157.558 li
94.9888 157.27 94.542 158.937 95.6172 159.226 cv
132.571 169.127 li
133.638 169.413 134.52 169.256 134.601 168.783 cv
134.682 168.31 133.911 167.699 132.844 167.414 cv
cp
f
139.699 169.25 mo
138.632 168.965 137.698 169.117 137.637 169.594 cv
137.575 170.071 138.411 170.692 139.478 170.978 cv
154.781 175.078 li
155.856 175.367 156.302 173.699 155.228 173.412 cv
139.699 169.25 li
cp
f
179.636 306.334 mo
153.726 333.269 li
152.157 334.566 151.849 335.597 153.625 334.5 cv
193.558 309.282 li
195.334 308.187 196.794 308.793 196.817 310.638 cv
196.926 319.264 li
196.949 321.108 196.2 323.955 195.251 325.622 cv
182.601 347.854 li
181.653 349.521 181.912 350.716 183.125 349.174 cv
201.022 325.271 li
202.235 323.729 203.921 321.103 204.787 319.405 cv
211.315 306.623 li
212.182 304.926 213.575 304.93 214.427 306.632 cv
232.033 341.79 li
232.885 343.492 233.447 343.381 233.287 341.541 cv
229.84 301.731 li
229.68 299.892 224.73 283.912 226.001 285.422 cv
246.926 304.333 li
248.196 305.842 247.973 315.569 250.038 316.224 cv
254.312 317.578 li
256.377 318.233 258.867 320.095 259.874 321.737 cv
274 338 li
275.007 339.643 276.703 339.758 276.035 338 cv
265.336 316.005 li
264.668 314.247 258.781 313.057 257.328 311.667 cv
250.74 300.021 li
249.287 298.632 249.831 297.917 251.954 298.426 cv
262.61 300.977 li
264.733 301.484 267.594 303.051 268.998 304.475 cv
290.75 328.75 li
292.154 330.174 294.156 329 289.873 324.801 cv
274.664 302.979 li
273.553 301.385 274.08 300.995 275.842 302.108 cv
312.762 323.965 li
324.624 329.465 322.073 326.221 320.416 325 cv
268.209 289.563 li
266.552 288.343 263.451 287.069 261.282 286.719 cv
243.062 283.776 li
240.893 283.426 237.482 282.564 235.444 281.853 cv
230.325 280.064 li
228.287 279.353 224.87 279.031 222.694 279.347 cv
216.416 280.259 li
197.973 283.102 li
195.801 283.437 192.672 284.674 190.986 285.865 cv
178.679 294.562 138.511 322.534 120.543 335.763 cv
115.693 339.334 124 336 124 336 cv
125.769 334.895 193 292.489 193 294.334 cv
187.211 302.229 li
187.211 304.074 181.205 305.036 179.636 306.334 cv
cp
f
75.5342 388.65 mo
75.9463 388.594 76.2437 388.782 76.4258 389.215 cv
76.6074 389.647 76.6924 390.156 76.6797 390.742 cv
76.6733 391.035 76.6465 391.291 76.5991 391.512 cv
76.5513 391.732 76.4619 391.945 76.3296 392.147 cv
76.1978 392.351 76.0234 392.55 75.8066 392.745 cv
75.5894 392.94 75.3081 393.159 74.9629 393.4 cv
74.1563 393.979 73.5186 394.624 73.0488 395.341 cv
72.5791 396.058 72.3374 396.738 72.3237 397.383 cv
72.3145 397.793 72.4053 398.17 72.5967 398.513 cv
72.7881 398.856 73.0938 399.141 73.5146 399.365 cv
73.9346 399.591 74.4805 399.74 75.1528 399.813 cv
75.8242 399.888 76.6372 399.859 77.5903 399.729 cv
78.5713 399.595 79.5059 399.307 80.395 398.863 cv
81.2837 398.421 82.0649 397.861 82.7393 397.186 cv
83.4131 396.51 83.9541 395.745 84.3633 394.891 cv
84.771 394.036 84.9858 393.141 85.0063 392.204 cv
85.0215 391.501 84.8242 390.798 84.4146 390.094 cv
84.0044 389.391 83.3457 388.693 82.439 387.999 cv
80.8354 386.758 79.6201 385.745 78.7939 384.963 cv
77.9668 384.181 77.457 383.686 77.2632 383.479 cv
76.2241 382.335 75.4546 381.205 74.9546 380.085 cv
74.4541 378.966 74.2183 377.762 74.2461 376.473 cv
74.2725 375.281 74.5068 374.091 74.9512 372.902 cv
75.395 371.712 75.9839 370.57 76.7168 369.478 cv
77.4487 368.385 78.291 367.35 79.2407 366.373 cv
80.1904 365.396 81.1812 364.536 82.2109 363.792 cv
83.2407 363.047 84.2754 362.434 85.3135 361.951 cv
86.3516 361.469 87.3335 361.164 88.2578 361.038 cv
88.9546 360.942 89.5962 360.962 90.1816 361.096 cv
90.7666 361.23 91.2749 361.497 91.7061 361.896 cv
92.1372 362.295 92.4692 362.838 92.7017 363.527 cv
92.9351 364.215 93.0405 365.066 93.0186 366.082 cv
92.9868 367.546 92.6504 368.984 92.0107 370.396 cv
91.3696 371.807 90.4111 373.174 89.1348 374.498 cv
88.5684 375.101 88.0513 375.435 87.582 375.498 cv
87.0981 375.564 86.7192 375.378 86.4458 374.938 cv
86.1709 374.498 86.0415 373.956 86.0557 373.312 cv
86.0674 372.765 86.1963 372.203 86.4429 371.624 cv
86.6895 371.045 87.0801 370.524 87.6147 370.062 cv
88.0337 369.713 88.4087 369.267 88.7393 368.726 cv
89.0703 368.184 89.2407 367.68 89.251 367.211 cv
89.2607 366.762 89.1567 366.483 88.9395 366.377 cv
88.7217 366.27 88.4565 366.238 88.1436 366.281 cv
87.5469 366.362 86.894 366.554 86.1851 366.855 cv
85.4771 367.156 84.7666 367.531 84.0552 367.979 cv
83.3438 368.427 82.6519 368.938 81.98 369.518 cv
81.3076 370.096 80.7134 370.703 80.1968 371.338 cv
79.6787 371.974 79.2607 372.63 78.9409 373.307 cv
78.6216 373.981 78.4551 374.633 78.4414 375.258 cv
78.4321 375.688 78.4868 376.079 78.6074 376.433 cv
78.7275 376.786 78.9077 377.131 79.1479 377.468 cv
79.3892 377.805 79.6826 378.149 80.0293 378.501 cv
80.3765 378.853 80.7793 379.23 81.2383 379.636 cv
86.1206 384.021 li
86.7461 384.577 87.3047 385.129 87.7964 385.675 cv
88.2876 386.221 88.6978 386.778 89.0254 387.348 cv
89.3535 387.916 89.6025 388.499 89.7744 389.099 cv
89.9453 389.698 90.0234 390.35 90.0083 391.053 cv
89.9741 392.614 89.646 394.184 89.0229 395.758 cv
88.4004 397.332 87.5322 398.779 86.4189 400.1 cv
85.3057 401.42 83.9766 402.546 82.4326 403.477 cv
80.8872 404.408 79.1836 405.002 77.3208 405.256 cv
75.5854 405.493 74.1147 405.504 72.9067 405.29 cv
71.6992 405.075 70.7114 404.693 69.9434 404.146 cv
69.1753 403.599 68.623 402.925 68.2856 402.125 cv
67.9482 401.323 67.79 400.454 67.8105 399.517 cv
67.8315 398.541 68.0352 397.525 68.4194 396.47 cv
68.8037 395.414 69.3369 394.394 70.0176 393.404 cv
70.6982 392.416 71.5083 391.507 72.4487 390.678 cv
73.3882 389.849 74.417 389.173 75.5342 388.65 cv
cp
f
98.231 385.578 mo
97.6738 387.056 97.1465 388.496 96.6479 389.897 cv
96.1494 391.299 95.6816 392.595 95.2451 393.783 cv
95.0645 394.275 94.8853 394.84 94.708 395.477 cv
94.5313 396.114 94.438 396.668 94.4277 397.137 cv
94.4219 397.41 94.4629 397.618 94.5522 397.762 cv
94.6411 397.905 94.7925 397.963 95.0059 397.934 cv
95.3042 397.893 95.6836 397.72 96.1445 397.413 cv
96.6045 397.106 97.1025 396.718 97.6372 396.245 cv
98.1724 395.773 98.7363 395.238 99.3311 394.641 cv
99.9253 394.045 100.509 393.43 101.083 392.796 cv
101.657 392.162 102.206 391.532 102.73 390.906 cv
103.254 390.279 103.72 389.705 104.129 389.183 cv
104.361 388.937 104.576 388.8 104.776 388.772 cv
105.018 388.739 105.213 388.859 105.364 389.131 cv
105.514 389.402 105.584 389.763 105.574 390.211 cv
105.564 390.66 105.476 391.13 105.31 391.62 cv
105.143 392.11 104.849 392.607 104.426 393.113 cv
103.477 394.391 102.518 395.612 101.55 396.777 cv
100.582 397.941 99.623 398.981 98.6738 399.899 cv
97.7256 400.818 96.791 401.574 95.8706 402.167 cv
94.9502 402.76 94.0635 403.115 93.21 403.231 cv
92.6411 403.309 92.167 403.271 91.7871 403.119 cv
91.4082 402.967 91.105 402.726 90.8779 402.396 cv
90.6514 402.066 90.4932 401.67 90.4043 401.205 cv
90.3154 400.74 90.2764 400.234 90.2881 399.688 cv
90.3091 398.712 90.4526 397.68 90.7178 396.592 cv
90.9819 395.505 91.2729 394.521 91.5894 393.641 cv
92.0425 392.371 92.4922 391.113 92.9375 389.864 cv
93.3828 388.615 93.8164 387.417 94.2388 386.27 cv
93.3213 386.396 li
92.5249 386.504 91.981 386.403 91.6899 386.092 cv
91.3994 385.781 91.2588 385.401 91.2686 384.952 cv
91.2725 384.757 91.3237 384.512 91.4229 384.216 cv
91.521 383.92 91.6621 383.639 91.8452 383.37 cv
92.0283 383.102 92.2495 382.862 92.5093 382.651 cv
92.769 382.44 93.063 382.313 93.3901 382.269 cv
95.6938 381.953 li
100.461 369.066 li
100.763 368.285 101.126 367.705 101.553 367.325 cv
101.979 366.945 102.42 366.725 102.875 366.662 cv
103.302 366.604 103.689 366.707 104.038 366.971 cv
104.386 367.235 104.553 367.729 104.538 368.451 cv
104.529 368.822 104.461 369.206 104.332 369.604 cv
104.202 370 104.033 370.466 103.822 371.001 cv
103.688 371.351 103.522 371.768 103.328 372.252 cv
103.133 372.736 102.926 373.251 102.709 373.797 cv
102.491 374.342 102.266 374.913 102.034 375.51 cv
101.801 376.105 101.572 376.683 101.348 377.238 cv
100.836 378.554 100.296 379.942 99.7256 381.402 cv
106.68 380.453 li
107.021 380.406 107.333 380.388 107.617 380.397 cv
107.9 380.407 108.144 380.472 108.346 380.59 cv
108.549 380.708 108.705 380.887 108.813 381.125 cv
108.922 381.362 108.971 381.696 108.961 382.126 cv
108.957 382.341 108.928 382.56 108.873 382.781 cv
108.819 383.003 108.722 383.211 108.583 383.404 cv
108.444 383.599 108.256 383.771 108.019 383.92 cv
107.781 384.069 107.478 384.188 107.107 384.278 cv
98.231 385.578 li
cp
f
110.6 383.1 mo
111.164 382.556 111.746 382.048 112.345 381.576 cv
112.943 381.105 113.523 380.691 114.084 380.332 cv
114.645 379.973 115.179 379.676 115.688 379.441 cv
116.196 379.206 116.65 379.062 117.048 379.007 cv
117.688 378.92 118.178 379.062 118.517 379.435 cv
118.856 379.807 119.015 380.49 118.993 381.486 cv
118.989 381.701 118.976 381.932 118.958 382.178 cv
118.938 382.424 118.904 382.686 118.854 382.965 cv
118.772 383.482 118.546 384.106 118.176 384.839 cv
117.806 385.571 117.374 386.341 116.881 387.148 cv
116.389 387.955 115.861 388.771 115.296 389.598 cv
114.733 390.425 114.213 391.188 113.737 391.885 cv
113.261 392.583 112.865 393.187 112.549 393.697 cv
112.233 394.207 112.073 394.551 112.069 394.727 cv
112.066 394.883 112.071 394.989 112.084 395.046 cv
112.097 395.103 112.16 395.123 112.273 395.107 cv
113.051 394.553 113.92 393.895 114.88 393.13 cv
115.839 392.367 116.795 391.589 117.749 390.797 cv
118.701 390.004 119.604 389.233 120.457 388.484 cv
121.31 387.734 122.033 387.087 122.627 386.538 cv
122.757 386.423 122.89 386.322 123.026 386.235 cv
123.163 386.148 123.288 386.098 123.402 386.082 cv
123.658 386.047 123.869 386.135 124.035 386.346 cv
124.201 386.557 124.279 386.857 124.27 387.248 cv
124.26 387.697 124.111 388.229 123.821 388.843 cv
123.531 389.457 123.052 390.121 122.385 390.835 cv
121.877 391.333 121.309 391.892 120.678 392.514 cv
120.048 393.135 119.389 393.779 118.701 394.448 cv
118.012 395.117 117.317 395.771 116.616 396.412 cv
115.915 397.053 115.239 397.632 114.589 398.148 cv
113.94 398.666 113.332 399.095 112.765 399.436 cv
112.196 399.775 111.707 399.975 111.294 400.03 cv
110.313 400.164 109.584 399.942 109.107 399.365 cv
108.631 398.788 108.404 397.991 108.426 396.977 cv
108.429 396.82 108.439 396.702 108.455 396.622 cv
108.573 395.749 108.776 394.894 109.064 394.056 cv
109.351 393.22 109.674 392.416 110.031 391.646 cv
110.388 390.877 110.758 390.141 111.143 389.436 cv
111.526 388.731 111.877 388.07 112.196 387.452 cv
112.514 386.834 112.778 386.268 112.988 385.752 cv
113.197 385.236 113.307 384.773 113.315 384.364 cv
113.318 384.267 113.306 384.171 113.279 384.077 cv
113.253 383.983 113.19 383.943 113.091 383.957 cv
112.92 383.98 112.637 384.106 112.242 384.336 cv
111.847 384.565 111.426 384.856 110.979 385.209 cv
110.532 385.562 110.105 385.956 109.699 386.392 cv
109.292 386.826 108.999 387.271 108.819 387.724 cv
108.579 388.302 108.301 389.031 107.984 389.91 cv
107.667 390.791 107.338 391.713 106.999 392.674 cv
106.659 393.635 106.33 394.585 106.012 395.524 cv
105.693 396.464 105.421 397.271 105.193 397.943 cv
105.011 398.533 104.775 399.071 104.488 399.559 cv
104.201 400.045 103.891 400.468 103.557 400.824 cv
103.223 401.182 102.883 401.472 102.539 401.694 cv
102.193 401.916 101.878 402.047 101.594 402.086 cv
101.267 402.131 101.01 402.049 100.823 401.841 cv
100.636 401.633 100.548 401.265 100.56 400.737 cv
100.564 400.522 100.595 400.251 100.652 399.922 cv
100.709 399.593 100.819 399.223 100.985 398.811 cv
101.255 398.112 101.53 397.354 101.81 396.537 cv
102.09 395.72 102.412 394.785 102.775 393.733 cv
103.139 392.681 103.558 391.475 104.034 390.114 cv
104.511 388.756 105.073 387.184 105.721 385.402 cv
105.527 385.195 105.366 384.93 105.239 384.606 cv
105.111 384.283 105.053 383.867 105.063 383.359 cv
105.074 382.891 105.154 382.476 105.304 382.115 cv
105.454 381.755 105.651 381.45 105.898 381.202 cv
106.144 380.954 106.429 380.755 106.751 380.604 cv
107.073 380.452 107.413 380.353 107.768 380.304 cv
108.138 380.254 108.506 380.247 108.875 380.284 cv
109.242 380.321 109.57 380.408 109.857 380.544 cv
110.145 380.681 110.379 380.862 110.558 381.091 cv
110.737 381.318 110.824 381.6 110.816 381.932 cv
110.815 381.99 110.799 382.07 110.769 382.172 cv
110.737 382.273 110.704 382.385 110.666 382.507 cv
110.627 382.629 110.593 382.74 110.563 382.842 cv
110.532 382.943 110.516 383.023 110.515 383.082 cv
110.514 383.121 110.521 383.14 110.535 383.138 cv
110.557 383.135 li
110.6 383.1 li
cp
f
129.54 381.593 mo
128.872 381.685 128.22 382.007 127.584 382.562 cv
126.948 383.114 126.379 383.806 125.879 384.634 cv
125.38 385.461 124.977 386.368 124.672 387.354 cv
124.367 388.34 124.204 389.311 124.183 390.268 cv
124.175 390.658 124.184 391.062 124.21 391.476 cv
124.236 391.891 124.31 392.266 124.43 392.6 cv
124.551 392.934 124.726 393.201 124.955 393.404 cv
125.185 393.606 125.498 393.68 125.896 393.626 cv
126.209 393.583 126.58 393.343 127.008 392.904 cv
127.436 392.467 127.88 391.919 128.341 391.262 cv
128.802 390.604 129.253 389.892 129.696 389.121 cv
130.138 388.35 130.536 387.599 130.893 386.868 cv
131.249 386.14 131.54 385.486 131.765 384.91 cv
131.99 384.334 132.105 383.919 132.111 383.665 cv
132.119 383.294 132.034 382.97 131.856 382.692 cv
131.677 382.415 131.456 382.188 131.19 382.01 cv
130.924 381.832 130.64 381.711 130.337 381.645 cv
130.033 381.579 129.768 381.563 129.54 381.593 cv
cp
144.159 387.13 mo
143.896 387.497 143.544 388.003 143.105 388.646 cv
142.666 389.29 142.165 389.991 141.603 390.75 cv
141.04 391.508 140.442 392.276 139.808 393.055 cv
139.174 393.831 138.528 394.548 137.868 395.202 cv
137.209 395.857 136.563 396.408 135.929 396.854 cv
135.295 397.302 134.702 397.563 134.146 397.639 cv
133.649 397.707 133.225 397.618 132.876 397.374 cv
132.527 397.13 132.24 396.789 132.016 396.353 cv
131.792 395.916 131.628 395.407 131.528 394.827 cv
131.427 394.247 131.384 393.646 131.397 393.021 cv
131.406 392.61 131.436 392.202 131.488 391.796 cv
131.539 391.39 131.618 391.004 131.726 390.639 cv
131.267 391.52 130.747 392.433 130.166 393.379 cv
129.586 394.324 128.964 395.197 128.302 395.998 cv
127.639 396.8 126.951 397.478 126.236 398.033 cv
125.523 398.588 124.803 398.915 124.078 399.014 cv
123.708 399.064 123.28 399.021 122.794 398.883 cv
122.308 398.745 121.85 398.472 121.419 398.063 cv
120.988 397.654 120.631 397.1 120.349 396.398 cv
120.066 395.697 119.937 394.811 119.96 393.736 cv
119.978 392.936 120.087 391.966 120.29 390.829 cv
120.491 389.691 120.787 388.498 121.175 387.248 cv
121.564 385.997 122.052 384.747 122.64 383.499 cv
123.227 382.251 123.915 381.11 124.703 380.078 cv
125.491 379.046 126.382 378.175 127.375 377.465 cv
128.369 376.754 129.471 376.316 130.68 376.151 cv
131.305 376.066 131.85 376.099 132.315 376.249 cv
132.779 376.4 133.173 376.58 133.495 376.789 cv
133.857 377.051 134.176 377.349 134.454 377.681 cv
134.699 377.472 134.952 377.271 135.211 377.08 cv
135.427 376.914 135.654 376.762 135.891 376.622 cv
136.127 376.482 136.332 376.401 136.502 376.378 cv
137.042 376.305 137.479 376.449 137.811 376.813 cv
138.144 377.176 138.305 377.602 138.294 378.09 cv
138.291 378.227 138.282 378.335 138.266 378.415 cv
138.186 378.796 138.066 379.279 137.904 379.866 cv
137.743 380.453 137.562 381.105 137.362 381.823 cv
137.162 382.542 136.958 383.29 136.749 384.068 cv
136.542 384.847 136.351 385.606 136.179 386.351 cv
136.006 387.095 135.864 387.791 135.75 388.439 cv
135.637 389.088 135.576 389.637 135.566 390.085 cv
135.553 390.671 135.614 391.145 135.748 391.506 cv
135.881 391.867 136.119 392.024 136.461 391.979 cv
136.674 391.949 136.928 391.822 137.224 391.597 cv
137.519 391.371 137.841 391.078 138.189 390.72 cv
138.538 390.36 138.897 389.956 139.269 389.506 cv
139.64 389.057 140 388.604 140.351 388.146 cv
141.169 387.062 142.039 385.832 142.962 384.461 cv
143.195 384.176 143.418 384.02 143.632 383.99 cv
143.917 383.951 144.15 384.109 144.334 384.464 cv
144.518 384.817 144.604 385.229 144.594 385.697 cv
144.582 386.244 144.438 386.722 144.159 387.13 cv
cp
f
147.449 369.83 mo
147.459 369.381 147.529 368.909 147.661 368.414 cv
147.792 367.92 147.983 367.461 148.233 367.037 cv
148.483 366.613 148.792 366.25 149.161 365.946 cv
149.529 365.643 149.961 365.457 150.46 365.389 cv
151.284 365.276 151.856 365.418 152.173 365.813 cv
152.491 366.207 152.642 366.736 152.627 367.399 cv
152.62 367.771 152.558 368.188 152.441 368.651 cv
152.325 369.115 152.156 369.553 151.935 369.963 cv
151.713 370.372 151.428 370.728 151.082 371.028 cv
150.734 371.329 150.327 371.511 149.857 371.575 cv
148.975 371.695 148.361 371.59 148.014 371.258 cv
147.667 370.926 147.479 370.449 147.449 369.83 cv
cp
144.959 376.741 mo
145.213 376.162 145.499 375.733 145.817 375.456 cv
146.134 375.179 146.458 375.019 146.785 374.974 cv
147.325 374.899 147.786 375.075 148.166 375.5 cv
148.547 375.925 148.729 376.508 148.713 377.25 cv
148.694 377.428 148.673 377.606 148.648 377.785 cv
148.623 377.964 148.573 378.146 148.498 378.331 cv
148.287 378.866 148.115 379.318 147.979 379.688 cv
147.843 380.056 147.719 380.398 147.606 380.716 cv
147.493 381.033 147.383 381.346 147.277 381.651 cv
147.171 381.958 147.042 382.326 146.891 382.756 cv
146.71 383.268 146.507 383.826 146.281 384.431 cv
146.055 385.035 145.839 385.654 145.634 386.286 cv
145.429 386.918 145.253 387.535 145.104 388.14 cv
144.957 388.743 144.877 389.29 144.867 389.778 cv
144.855 390.306 144.944 390.639 145.132 390.778 cv
145.321 390.918 145.593 390.964 145.948 390.916 cv
146.346 390.861 146.765 390.688 147.204 390.394 cv
147.643 390.1 148.087 389.737 148.535 389.306 cv
148.984 388.875 149.428 388.391 149.865 387.854 cv
150.301 387.318 150.714 386.779 151.102 386.24 cv
151.488 385.7 151.848 385.184 152.177 384.691 cv
152.507 384.198 152.783 383.761 153.004 383.381 cv
153.295 382.972 153.584 382.747 153.869 382.708 cv
154.125 382.673 154.331 382.801 154.488 383.091 cv
154.645 383.38 154.718 383.77 154.707 384.258 cv
154.697 384.707 154.605 385.196 154.43 385.727 cv
154.256 386.257 153.979 386.771 153.6 387.271 cv
152.852 388.386 152.091 389.458 151.317 390.488 cv
150.543 391.52 149.754 392.444 148.95 393.265 cv
148.145 394.086 147.339 394.766 146.533 395.304 cv
145.727 395.842 144.919 396.167 144.109 396.277 cv
142.957 396.435 142.059 396.153 141.416 395.434 cv
140.771 394.713 140.469 393.494 140.506 391.775 cv
140.526 390.877 140.637 389.986 140.84 389.102 cv
141.044 388.218 141.283 387.353 141.557 386.507 cv
141.83 385.661 142.117 384.844 142.418 384.054 cv
142.719 383.263 142.976 382.512 143.19 381.801 cv
143.267 381.537 143.4 381.13 143.589 380.579 cv
143.778 380.027 143.978 379.465 144.189 378.891 cv
144.431 378.215 144.688 377.498 144.959 376.741 cv
cp
f
161.435 377.09 mo
160.767 377.181 160.114 377.499 159.479 378.043 cv
158.843 378.587 158.275 379.268 157.775 380.086 cv
157.275 380.904 156.873 381.82 156.567 382.835 cv
156.261 383.851 156.097 384.876 156.075 385.911 cv
156.068 386.224 156.079 386.558 156.106 386.914 cv
156.133 387.27 156.205 387.596 156.318 387.893 cv
156.433 388.188 156.605 388.423 156.835 388.596 cv
157.065 388.769 157.387 388.827 157.799 388.771 cv
158.098 388.73 158.454 388.501 158.867 388.084 cv
159.28 387.668 159.709 387.151 160.155 386.535 cv
160.602 385.921 161.037 385.248 161.465 384.518 cv
161.892 383.787 162.28 383.077 162.628 382.387 cv
162.976 381.697 163.255 381.08 163.465 380.535 cv
163.676 379.99 163.784 379.591 163.79 379.337 cv
163.799 378.907 163.722 378.543 163.558 378.244 cv
163.395 377.945 163.19 377.707 162.946 377.525 cv
162.702 377.345 162.443 377.22 162.167 377.15 cv
161.893 377.08 161.648 377.061 161.435 377.09 cv
cp
162.358 371.823 mo
162.983 371.738 163.529 371.771 163.994 371.922 cv
164.458 372.072 164.851 372.252 165.173 372.461 cv
165.536 372.724 165.855 373.021 166.132 373.353 cv
166.334 373.149 166.551 372.954 166.782 372.768 cv
166.984 372.604 167.208 372.451 167.451 372.311 cv
167.696 372.17 167.938 372.083 168.181 372.051 cv
168.807 371.965 169.286 372.074 169.62 372.38 cv
169.953 372.685 170.115 373.08 170.104 373.568 cv
170.099 373.822 170.043 374.083 169.938 374.351 cv
164.665 388.008 li
165.08 387.455 li
166.788 385.878 168.19 384.631 169.289 383.711 cv
170.385 382.792 171.258 382.104 171.907 381.645 cv
172.555 381.187 173.019 380.895 173.297 380.769 cv
173.577 380.643 173.752 380.575 173.823 380.565 cv
174.15 380.521 174.398 380.657 174.569 380.975 cv
174.739 381.292 174.819 381.705 174.808 382.213 cv
174.796 382.779 174.666 383.371 174.418 383.989 cv
174.171 384.606 173.803 385.075 173.314 385.395 cv
172.664 385.932 171.907 386.518 171.042 387.151 cv
170.178 387.785 169.276 388.479 168.339 389.229 cv
167.4 389.979 166.458 390.805 165.509 391.703 cv
164.561 392.603 163.671 393.576 162.84 394.623 cv
158.478 405.47 li
158.112 406.629 157.783 407.579 157.491 408.32 cv
157.198 409.062 156.912 409.655 156.633 410.103 cv
156.354 410.549 156.071 410.869 155.783 411.064 cv
155.495 411.26 155.166 411.383 154.796 411.433 cv
154.242 411.509 153.811 411.305 153.501 410.822 cv
153.193 410.339 153.047 409.726 153.063 408.983 cv
153.08 408.202 153.234 407.275 153.528 406.204 cv
153.82 405.133 154.226 403.962 154.742 402.695 cv
155.259 401.427 155.88 400.086 156.605 398.674 cv
157.331 397.26 158.135 395.812 159.018 394.328 cv
161.764 389.339 li
161.208 390.097 160.663 390.754 160.126 391.314 cv
159.589 391.875 159.075 392.339 158.585 392.708 cv
158.095 393.076 157.639 393.358 157.217 393.552 cv
156.794 393.746 156.426 393.864 156.113 393.907 cv
155.544 393.985 155.022 393.876 154.547 393.581 cv
154.071 393.286 153.666 392.84 153.332 392.242 cv
152.997 391.646 152.739 390.922 152.56 390.07 cv
152.38 389.219 152.301 388.275 152.324 387.241 cv
152.371 385.093 152.715 383.109 153.357 381.288 cv
154 379.468 154.807 377.883 155.779 376.533 cv
156.751 375.184 157.817 374.1 158.977 373.278 cv
160.135 372.458 161.263 371.973 162.358 371.823 cv
cp
f
170.187 387.37 mo
170.55 386.328 170.965 385.166 171.433 383.886 cv
171.899 382.605 172.371 381.333 172.845 380.072 cv
173.319 378.81 173.767 377.609 174.188 376.471 cv
174.61 375.333 174.964 374.365 175.251 373.566 cv
182.705 353.596 li
182.796 353.33 182.932 353.068 183.115 352.81 cv
183.298 352.551 183.505 352.313 183.737 352.097 cv
183.968 351.88 184.213 351.7 184.472 351.558 cv
184.73 351.415 184.987 351.327 185.243 351.292 cv
185.869 351.206 186.299 351.309 186.534 351.598 cv
186.768 351.887 186.881 352.266 186.871 352.734 cv
186.862 353.164 186.773 353.629 186.606 354.129 cv
186.439 354.629 186.252 355.097 186.044 355.533 cv
185.386 357.084 184.753 358.646 184.145 360.218 cv
183.537 361.79 182.928 363.372 182.319 364.964 cv
181.71 366.557 181.098 368.139 180.482 369.713 cv
179.866 371.286 179.223 372.849 178.551 374.4 cv
178.96 373.819 179.396 373.214 179.856 372.587 cv
180.316 371.959 180.815 371.376 181.351 370.835 cv
181.887 370.295 182.472 369.83 183.104 369.441 cv
183.736 369.054 184.437 368.807 185.205 368.702 cv
185.66 368.64 186.092 368.64 186.501 368.7 cv
186.912 368.761 187.271 368.902 187.578 369.123 cv
187.885 369.344 188.125 369.671 188.301 370.104 cv
188.475 370.537 188.556 371.086 188.542 371.75 cv
188.522 372.629 188.409 373.448 188.201 374.207 cv
187.993 374.965 187.732 375.691 187.419 376.387 cv
187.106 377.082 186.766 377.751 186.397 378.396 cv
186.029 379.039 185.678 379.69 185.345 380.35 cv
185.011 381.009 184.72 381.686 184.471 382.382 cv
184.222 383.077 184.061 383.82 183.987 384.608 cv
183.986 384.647 183.981 384.688 183.974 384.728 cv
183.965 384.768 183.961 384.807 183.96 384.846 cv
183.952 385.236 184.042 385.468 184.232 385.539 cv
184.422 385.61 184.666 385.626 184.965 385.585 cv
185.349 385.532 185.764 385.374 186.209 385.108 cv
186.654 384.843 187.104 384.509 187.56 384.105 cv
188.016 383.703 188.472 383.256 188.929 382.766 cv
189.387 382.275 189.823 381.777 190.238 381.272 cv
190.653 380.769 191.036 380.283 191.386 379.816 cv
191.736 379.35 192.036 378.943 192.285 378.598 cv
192.417 378.424 192.554 378.289 192.697 378.191 cv
192.841 378.094 192.978 378.036 193.106 378.019 cv
193.362 377.983 193.576 378.086 193.748 378.325 cv
193.919 378.564 194 378.909 193.991 379.358 cv
193.982 379.769 193.868 380.251 193.651 380.807 cv
193.433 381.362 193.07 381.937 192.561 382.532 cv
191.758 383.576 190.942 384.584 190.113 385.554 cv
189.284 386.522 188.449 387.396 187.609 388.173 cv
186.771 388.949 185.938 389.589 185.111 390.092 cv
184.285 390.594 183.481 390.898 182.699 391.006 cv
181.689 391.144 180.885 390.937 180.288 390.386 cv
179.69 389.834 179.406 388.875 179.436 387.509 cv
179.457 386.513 179.602 385.554 179.871 384.631 cv
180.139 383.708 180.463 382.808 180.844 381.928 cv
181.225 381.049 181.629 380.195 182.059 379.367 cv
182.488 378.54 182.867 377.734 183.196 376.949 cv
183.374 376.594 183.512 376.268 183.611 375.973 cv
183.709 375.676 183.762 375.362 183.77 375.031 cv
183.776 374.738 183.724 374.507 183.614 374.337 cv
183.504 374.167 183.329 374.099 183.087 374.131 cv
182.248 374.246 181.467 374.635 180.744 375.299 cv
180.02 375.961 179.35 376.773 178.734 377.733 cv
178.117 378.694 177.542 379.732 177.007 380.846 cv
176.472 381.961 175.974 383.027 175.513 384.044 cv
175.304 384.5 175.09 385.021 174.872 385.605 cv
174.654 386.19 174.428 386.791 174.196 387.407 cv
173.962 388.023 173.718 388.635 173.464 389.244 cv
173.209 389.854 172.946 390.4 172.673 390.886 cv
172.4 391.371 172.115 391.77 171.818 392.083 cv
171.52 392.396 171.215 392.574 170.902 392.617 cv
170.404 392.686 170.025 392.537 169.763 392.174 cv
169.501 391.811 169.378 391.326 169.391 390.721 cv
169.401 390.271 169.468 389.79 169.592 389.276 cv
169.717 388.764 169.915 388.128 170.187 387.37 cv
cp
f
198.002 371.947 mo
197.445 373.425 196.917 374.865 196.419 376.267 cv
195.92 377.668 195.453 378.964 195.016 380.152 cv
194.835 380.645 194.656 381.21 194.479 381.846 cv
194.302 382.483 194.208 383.037 194.198 383.506 cv
194.192 383.779 194.234 383.988 194.323 384.131 cv
194.412 384.275 194.563 384.332 194.777 384.303 cv
195.075 384.262 195.455 384.089 195.916 383.782 cv
196.375 383.477 196.874 383.087 197.408 382.614 cv
197.943 382.143 198.507 381.607 199.102 381.01 cv
199.696 380.414 200.28 379.799 200.854 379.165 cv
201.428 378.532 201.977 377.902 202.501 377.275 cv
203.025 376.648 203.491 376.075 203.9 375.552 cv
204.132 375.306 204.347 375.169 204.546 375.142 cv
204.789 375.109 204.984 375.229 205.135 375.5 cv
205.285 375.771 205.355 376.132 205.345 376.58 cv
205.335 377.029 205.247 377.499 205.081 377.989 cv
204.914 378.479 204.619 378.977 204.197 379.482 cv
203.248 380.76 202.289 381.981 201.321 383.146 cv
200.353 384.311 199.394 385.351 198.445 386.27 cv
197.497 387.188 196.562 387.943 195.642 388.536 cv
194.721 389.129 193.834 389.484 192.981 389.601 cv
192.412 389.679 191.938 389.641 191.559 389.488 cv
191.179 389.336 190.876 389.095 190.649 388.766 cv
190.422 388.437 190.264 388.039 190.175 387.574 cv
190.086 387.109 190.047 386.604 190.059 386.058 cv
190.08 385.081 190.224 384.049 190.488 382.961 cv
190.753 381.874 191.044 380.891 191.36 380.01 cv
191.813 378.74 192.263 377.482 192.708 376.233 cv
193.154 374.984 193.587 373.786 194.01 372.64 cv
193.092 372.765 li
192.296 372.873 191.752 372.772 191.461 372.462 cv
191.17 372.15 191.03 371.771 191.04 371.321 cv
191.043 371.126 191.095 370.881 191.194 370.585 cv
191.292 370.289 191.433 370.008 191.616 369.739 cv
191.799 369.471 192.021 369.231 192.28 369.021 cv
192.54 368.81 192.834 368.683 193.161 368.638 cv
195.465 368.323 li
200.232 355.436 li
200.533 354.654 200.897 354.074 201.324 353.694 cv
201.75 353.314 202.191 353.094 202.646 353.031 cv
203.073 352.974 203.46 353.076 203.809 353.34 cv
204.157 353.604 204.324 354.098 204.308 354.82 cv
204.3 355.191 204.232 355.575 204.103 355.973 cv
203.973 356.369 203.804 356.836 203.593 357.37 cv
203.458 357.72 203.293 358.137 203.099 358.621 cv
202.903 359.105 202.697 359.62 202.48 360.166 cv
202.262 360.711 202.037 361.282 201.805 361.879 cv
201.572 362.475 201.343 363.052 201.119 363.608 cv
200.607 364.923 200.067 366.312 199.497 367.771 cv
206.451 366.822 li
206.792 366.775 207.104 366.757 207.388 366.767 cv
207.671 366.777 207.915 366.841 208.117 366.959 cv
208.32 367.078 208.476 367.256 208.585 367.494 cv
208.692 367.731 208.742 368.065 208.732 368.495 cv
208.728 368.71 208.699 368.929 208.644 369.15 cv
208.59 369.372 208.493 369.58 208.354 369.773 cv
208.215 369.969 208.027 370.14 207.79 370.289 cv
207.552 370.438 207.249 370.558 206.878 370.647 cv
198.002 371.947 li
cp
f
229.745 367.611 mo
229.188 369.088 228.661 370.528 228.162 371.931 cv
227.663 373.331 227.196 374.627 226.759 375.816 cv
226.579 376.309 226.399 376.873 226.222 377.51 cv
226.046 378.147 225.952 378.7 225.942 379.169 cv
225.936 379.442 225.977 379.651 226.066 379.795 cv
226.155 379.938 226.307 379.995 226.521 379.967 cv
226.819 379.926 227.198 379.752 227.659 379.445 cv
228.118 379.14 228.616 378.75 229.151 378.277 cv
229.687 377.806 230.251 377.271 230.845 376.674 cv
231.439 376.077 232.023 375.462 232.597 374.828 cv
233.171 374.195 233.72 373.565 234.245 372.938 cv
234.769 372.312 235.234 371.738 235.644 371.215 cv
235.875 370.969 236.091 370.832 236.29 370.806 cv
236.532 370.772 236.728 370.892 236.878 371.163 cv
237.028 371.435 237.099 371.795 237.089 372.243 cv
237.079 372.692 236.99 373.162 236.823 373.652 cv
236.657 374.143 236.362 374.641 235.94 375.146 cv
234.991 376.424 234.032 377.645 233.063 378.81 cv
232.096 379.974 231.138 381.014 230.188 381.933 cv
229.239 382.851 228.306 383.606 227.385 384.199 cv
226.464 384.793 225.577 385.147 224.723 385.264 cv
224.155 385.342 223.681 385.305 223.301 385.151 cv
222.922 384.999 222.619 384.758 222.392 384.429 cv
222.165 384.1 222.007 383.702 221.918 383.237 cv
221.829 382.772 221.79 382.267 221.802 381.721 cv
221.823 380.744 221.966 379.712 222.231 378.624 cv
222.496 377.537 222.787 376.554 223.103 375.673 cv
223.556 374.403 224.006 373.146 224.452 371.896 cv
224.897 370.648 225.331 369.449 225.752 368.303 cv
224.834 368.428 li
224.039 368.537 223.495 368.436 223.204 368.125 cv
222.913 367.814 222.772 367.434 222.782 366.984 cv
222.786 366.789 222.837 366.544 222.937 366.248 cv
223.035 365.952 223.176 365.671 223.359 365.402 cv
223.542 365.135 223.763 364.895 224.023 364.684 cv
224.283 364.474 224.577 364.346 224.904 364.301 cv
227.208 363.986 li
231.976 351.099 li
232.276 350.317 232.64 349.737 233.067 349.357 cv
233.493 348.979 233.935 348.758 234.39 348.695 cv
234.815 348.637 235.203 348.739 235.552 349.004 cv
235.9 349.268 236.067 349.761 236.052 350.483 cv
236.044 350.854 235.976 351.238 235.847 351.636 cv
235.716 352.032 235.547 352.499 235.337 353.034 cv
235.202 353.383 235.036 353.8 234.842 354.284 cv
234.647 354.769 234.44 355.283 234.224 355.829 cv
234.005 356.374 233.78 356.945 233.548 357.542 cv
233.315 358.139 233.087 358.715 232.862 359.271 cv
232.351 360.586 231.81 361.975 231.239 363.436 cv
238.194 362.485 li
238.536 362.438 238.847 362.42 239.131 362.43 cv
239.414 362.44 239.657 362.504 239.86 362.623 cv
240.063 362.741 240.22 362.919 240.327 363.157 cv
240.437 363.395 240.485 363.729 240.476 364.158 cv
240.471 364.373 240.442 364.592 240.388 364.813 cv
240.333 365.035 240.236 365.243 240.097 365.438 cv
239.958 365.632 239.771 365.803 239.532 365.952 cv
239.296 366.102 238.991 366.221 238.621 366.311 cv
229.745 367.611 li
cp
f
242.818 365.971 mo
242.149 366.063 241.501 366.38 240.873 366.923 cv
240.243 367.466 239.683 368.146 239.19 368.963 cv
238.697 369.78 238.299 370.682 237.993 371.668 cv
237.688 372.653 237.525 373.645 237.504 374.641 cv
237.495 375.012 237.508 375.414 237.542 375.847 cv
237.575 376.28 237.654 376.678 237.782 377.04 cv
237.908 377.402 238.097 377.693 238.347 377.912 cv
238.598 378.131 238.937 378.212 239.362 378.153 cv
240.017 378.064 240.659 377.737 241.288 377.175 cv
241.917 376.611 242.481 375.911 242.981 375.074 cv
243.481 374.237 243.885 373.311 244.19 372.295 cv
244.496 371.28 244.66 370.275 244.682 369.279 cv
244.69 368.889 244.681 368.485 244.654 368.07 cv
244.628 367.655 244.551 367.281 244.424 366.948 cv
244.297 366.616 244.107 366.354 243.856 366.165 cv
243.605 365.976 243.259 365.911 242.818 365.971 cv
cp
244.04 360.664 mo
244.58 360.59 245.157 360.609 245.772 360.72 cv
246.386 360.83 246.951 361.084 247.468 361.481 cv
247.983 361.878 248.407 362.438 248.739 363.161 cv
249.071 363.885 249.224 364.813 249.199 365.946 cv
249.187 366.531 249.115 367.208 248.985 367.976 cv
248.854 368.743 248.667 369.553 248.421 370.402 cv
248.56 370.618 248.718 370.762 248.901 370.834 cv
249.084 370.906 249.282 370.928 249.496 370.898 cv
249.794 370.857 250.128 370.695 250.495 370.412 cv
250.863 370.128 251.243 369.775 251.636 369.352 cv
252.026 368.928 252.421 368.455 252.814 367.935 cv
253.208 367.413 253.581 366.895 253.933 366.379 cv
254.284 365.864 254.603 365.379 254.89 364.921 cv
255.177 364.463 255.415 364.075 255.606 363.757 cv
255.709 363.606 255.831 363.521 255.974 363.502 cv
256.173 363.475 256.347 363.592 256.498 363.854 cv
256.647 364.115 256.718 364.5 256.706 365.008 cv
256.695 365.516 256.572 366.116 256.337 366.811 cv
256.103 367.505 255.679 368.254 255.065 369.058 cv
254.714 369.611 254.31 370.251 253.854 370.975 cv
253.399 371.699 252.916 372.389 252.405 373.043 cv
251.896 373.696 251.364 374.265 250.815 374.748 cv
250.267 375.232 249.722 375.512 249.181 375.585 cv
248.812 375.636 248.453 375.606 248.108 375.498 cv
247.764 375.39 247.417 375.184 247.069 374.881 cv
246.534 376.044 245.929 377.12 245.255 378.107 cv
244.581 379.095 243.836 379.966 243.019 380.72 cv
242.2 381.475 241.322 382.096 240.384 382.584 cv
239.443 383.073 238.448 383.389 237.396 383.533 cv
236.997 383.587 236.538 383.543 236.017 383.4 cv
235.495 383.257 235.001 382.969 234.535 382.536 cv
234.069 382.104 233.682 381.509 233.372 380.753 cv
233.062 379.997 232.92 379.043 232.944 377.891 cv
232.962 377.109 233.075 376.16 233.284 375.041 cv
233.492 373.923 233.798 372.756 234.2 371.544 cv
234.603 370.33 235.104 369.112 235.704 367.893 cv
236.306 366.671 237.014 365.552 237.83 364.535 cv
238.646 363.519 239.571 362.662 240.608 361.966 cv
241.644 361.269 242.788 360.835 244.04 360.664 cv
cp
f
269.338 362.202 mo
268.78 363.679 268.253 365.119 267.755 366.521 cv
267.257 367.922 266.788 369.218 266.353 370.407 cv
266.171 370.898 265.992 371.464 265.815 372.101 cv
265.638 372.738 265.544 373.291 265.534 373.76 cv
265.528 374.033 265.569 374.242 265.659 374.386 cv
265.748 374.529 265.899 374.586 266.112 374.557 cv
266.411 374.517 266.79 374.343 267.251 374.036 cv
267.712 373.73 268.209 373.341 268.743 372.869 cv
269.278 372.396 269.843 371.861 270.438 371.265 cv
271.032 370.668 271.616 370.053 272.19 369.419 cv
272.764 368.786 273.313 368.156 273.837 367.529 cv
274.361 366.902 274.827 366.329 275.235 365.806 cv
275.468 365.56 275.683 365.424 275.882 365.396 cv
276.124 365.363 276.32 365.482 276.471 365.754 cv
276.62 366.025 276.69 366.386 276.681 366.834 cv
276.671 367.283 276.583 367.753 276.417 368.243 cv
276.249 368.733 275.956 369.231 275.532 369.736 cv
274.583 371.015 273.624 372.236 272.657 373.4 cv
271.688 374.564 270.729 375.605 269.78 376.523 cv
268.833 377.441 267.897 378.197 266.978 378.79 cv
266.058 379.383 265.171 379.738 264.317 379.854 cv
263.748 379.933 263.274 379.895 262.894 379.742 cv
262.515 379.59 262.212 379.349 261.985 379.02 cv
261.758 378.69 261.601 378.293 261.511 377.828 cv
261.422 377.363 261.384 376.857 261.396 376.312 cv
261.416 375.335 261.56 374.303 261.824 373.215 cv
262.089 372.129 262.38 371.145 262.696 370.264 cv
263.149 368.994 263.599 367.736 264.044 366.487 cv
264.489 365.239 264.923 364.041 265.345 362.894 cv
264.429 363.019 li
263.632 363.127 263.087 363.026 262.797 362.716 cv
262.507 362.405 262.366 362.025 262.376 361.576 cv
262.38 361.381 262.431 361.135 262.53 360.839 cv
262.628 360.543 262.769 360.262 262.952 359.994 cv
263.136 359.726 263.356 359.485 263.616 359.275 cv
263.876 359.064 264.17 358.937 264.497 358.892 cv
266.8 358.577 li
271.568 345.689 li
271.868 344.908 272.233 344.328 272.659 343.948 cv
273.086 343.569 273.526 343.348 273.981 343.286 cv
274.409 343.228 274.796 343.33 275.145 343.595 cv
275.493 343.858 275.659 344.352 275.644 345.074 cv
275.636 345.445 275.567 345.83 275.438 346.227 cv
275.31 346.623 275.14 347.09 274.929 347.625 cv
274.794 347.975 274.629 348.391 274.435 348.875 cv
274.239 349.359 274.033 349.875 273.815 350.42 cv
273.599 350.965 273.373 351.536 273.141 352.133 cv
272.907 352.729 272.679 353.306 272.454 353.862 cv
271.943 355.178 271.402 356.565 270.833 358.026 cv
277.786 357.076 li
278.128 357.029 278.44 357.011 278.724 357.021 cv
279.007 357.031 279.251 357.095 279.453 357.214 cv
279.656 357.332 279.812 357.51 279.921 357.748 cv
280.028 357.986 280.077 358.32 280.068 358.75 cv
280.063 358.965 280.034 359.183 279.979 359.404 cv
279.926 359.626 279.829 359.834 279.69 360.028 cv
279.55 360.223 279.362 360.395 279.125 360.543 cv
278.888 360.692 278.585 360.813 278.214 360.901 cv
269.338 362.202 li
cp
f
271.942 373.469 mo
272.306 372.426 272.721 371.264 273.188 369.984 cv
273.655 368.703 274.126 367.432 274.601 366.17 cv
275.075 364.908 275.522 363.707 275.944 362.568 cv
276.366 361.432 276.72 360.463 277.007 359.664 cv
284.46 339.693 li
284.552 339.428 284.688 339.166 284.871 338.907 cv
285.054 338.648 285.261 338.411 285.493 338.194 cv
285.724 337.978 285.97 337.799 286.228 337.656 cv
286.486 337.514 286.743 337.425 286.999 337.39 cv
287.624 337.305 288.056 337.406 288.29 337.695 cv
288.524 337.984 288.638 338.363 288.627 338.832 cv
288.618 339.262 288.529 339.727 288.362 340.227 cv
288.196 340.727 288.008 341.194 287.8 341.632 cv
287.142 343.182 286.509 344.744 285.901 346.315 cv
285.292 347.889 284.684 349.47 284.075 351.063 cv
283.466 352.654 282.854 354.236 282.238 355.811 cv
281.622 357.385 280.979 358.946 280.308 360.499 cv
280.716 359.917 281.151 359.313 281.612 358.685 cv
282.072 358.057 282.571 357.474 283.106 356.934 cv
283.644 356.393 284.228 355.928 284.86 355.54 cv
285.493 355.151 286.192 354.905 286.96 354.801 cv
287.415 354.738 287.849 354.737 288.258 354.799 cv
288.668 354.859 289.026 355 289.333 355.221 cv
289.641 355.441 289.882 355.77 290.058 356.203 cv
290.231 356.636 290.312 357.185 290.298 357.849 cv
290.278 358.728 290.165 359.547 289.957 360.305 cv
289.749 361.063 289.488 361.789 289.175 362.484 cv
288.862 363.18 288.521 363.85 288.153 364.494 cv
287.784 365.137 287.435 365.789 287.101 366.447 cv
286.767 367.106 286.476 367.784 286.228 368.48 cv
285.978 369.176 285.816 369.918 285.743 370.707 cv
285.741 370.746 285.737 370.785 285.729 370.825 cv
285.722 370.865 285.717 370.905 285.716 370.944 cv
285.708 371.335 285.798 371.566 285.988 371.638 cv
286.178 371.709 286.423 371.724 286.721 371.684 cv
287.104 371.631 287.52 371.472 287.965 371.207 cv
288.41 370.941 288.86 370.607 289.315 370.204 cv
289.771 369.801 290.228 369.354 290.685 368.863 cv
291.143 368.373 291.579 367.876 291.993 367.371 cv
292.409 366.866 292.792 366.381 293.142 365.914 cv
293.493 365.447 293.792 365.042 294.04 364.696 cv
294.173 364.522 294.31 364.387 294.453 364.289 cv
294.597 364.191 294.733 364.134 294.862 364.117 cv
295.118 364.082 295.331 364.184 295.503 364.423 cv
295.675 364.663 295.757 365.007 295.747 365.456 cv
295.737 365.866 295.624 366.35 295.407 366.904 cv
295.188 367.46 294.825 368.035 294.316 368.63 cv
293.514 369.674 292.698 370.682 291.868 371.651 cv
291.04 372.621 290.205 373.494 289.365 374.271 cv
288.526 375.048 287.693 375.688 286.867 376.189 cv
286.042 376.692 285.237 376.997 284.455 377.104 cv
283.444 377.241 282.642 377.035 282.044 376.483 cv
281.446 375.933 281.162 374.974 281.192 373.607 cv
281.214 372.611 281.358 371.651 281.627 370.729 cv
281.896 369.807 282.22 368.906 282.601 368.026 cv
282.98 367.146 283.386 366.293 283.815 365.465 cv
284.243 364.639 284.623 363.832 284.952 363.047 cv
285.13 362.691 285.268 362.366 285.366 362.07 cv
285.466 361.774 285.519 361.461 285.525 361.129 cv
285.532 360.836 285.479 360.605 285.37 360.436 cv
285.261 360.265 285.085 360.196 284.843 360.229 cv
284.004 360.344 283.223 360.733 282.5 361.396 cv
281.775 362.06 281.106 362.871 280.489 363.832 cv
279.873 364.793 279.298 365.83 278.763 366.944 cv
278.228 368.059 277.729 369.125 277.269 370.143 cv
277.06 370.598 276.847 371.119 276.628 371.704 cv
276.409 372.289 276.185 372.889 275.952 373.505 cv
275.718 374.121 275.474 374.732 275.22 375.342 cv
274.965 375.951 274.702 376.498 274.429 376.983 cv
274.155 377.469 273.871 377.868 273.573 378.182 cv
273.276 378.494 272.971 378.673 272.658 378.715 cv
272.16 378.783 271.78 378.636 271.519 378.272 cv
271.257 377.908 271.134 377.424 271.147 376.818 cv
271.157 376.369 271.224 375.888 271.349 375.374 cv
271.474 374.861 271.671 374.227 271.942 373.469 cv
cp
f
302.231 356.715 mo
302.161 356.705 302.098 356.704 302.041 356.712 cv
301.983 356.72 301.92 356.729 301.849 356.738 cv
301.309 356.812 300.8 357.027 300.324 357.385 cv
299.849 357.741 299.41 358.186 299.009 358.718 cv
298.606 359.25 298.247 359.838 297.929 360.485 cv
297.609 361.133 297.322 361.771 297.067 362.399 cv
296.813 363.028 296.598 363.627 296.423 364.195 cv
296.247 364.765 296.112 365.24 296.019 365.623 cv
296.524 365.204 297.05 364.733 297.593 364.211 cv
298.135 363.689 298.646 363.191 299.124 362.718 cv
299.603 362.243 300.019 361.816 300.375 361.437 cv
300.73 361.057 300.98 360.799 301.126 360.662 cv
301.776 360.027 302.229 359.455 302.481 358.943 cv
302.733 358.433 302.864 358.001 302.872 357.649 cv
302.878 357.356 302.815 357.132 302.684 356.975 cv
302.552 356.817 302.402 356.73 302.231 356.715 cv
cp
303.089 352.567 mo
304.269 352.406 305.142 352.677 305.708 353.378 cv
306.274 354.08 306.542 355.123 306.512 356.51 cv
306.494 357.33 306.319 358.211 305.987 359.151 cv
305.653 360.092 305.094 361.079 304.306 362.111 cv
303.517 363.144 302.47 364.231 301.161 365.374 cv
299.853 366.517 298.222 367.707 296.267 368.948 cv
296.325 369.505 296.535 369.919 296.898 370.19 cv
297.261 370.462 297.748 370.557 298.359 370.473 cv
299.014 370.384 299.718 370.156 300.47 369.79 cv
301.222 369.425 301.969 368.986 302.71 368.477 cv
303.451 367.966 304.176 367.424 304.883 366.851 cv
305.591 366.277 306.229 365.738 306.8 365.231 cv
307.372 364.725 307.849 364.29 308.233 363.926 cv
308.616 363.562 308.873 363.332 309.003 363.236 cv
309.134 363.102 309.253 363.018 309.359 362.983 cv
309.467 362.949 309.563 362.926 309.647 362.914 cv
309.818 362.891 309.96 362.926 310.071 363.018 cv
310.183 363.109 310.275 363.223 310.351 363.358 cv
310.425 363.494 310.476 363.644 310.5 363.806 cv
310.525 363.968 310.536 364.107 310.534 364.225 cv
310.53 364.4 310.511 364.612 310.478 364.86 cv
310.443 365.108 310.331 365.401 310.14 365.739 cv
310.065 365.846 309.821 366.142 309.407 366.627 cv
308.993 367.111 308.46 367.691 307.807 368.364 cv
307.153 369.038 306.397 369.76 305.536 370.528 cv
304.677 371.298 303.768 372.021 302.81 372.697 cv
301.852 373.373 300.856 373.962 299.825 374.463 cv
298.794 374.965 297.78 375.283 296.784 375.419 cv
295.932 375.535 295.179 375.414 294.527 375.056 cv
293.876 374.696 293.327 374.168 292.882 373.47 cv
292.436 372.771 292.103 371.941 291.883 370.979 cv
291.663 370.015 291.565 368.986 291.589 367.894 cv
291.606 367.054 291.747 366.114 292.011 365.076 cv
292.274 364.038 292.646 362.979 293.122 361.901 cv
293.599 360.824 294.18 359.758 294.862 358.7 cv
295.544 357.643 296.306 356.688 297.147 355.832 cv
297.987 354.979 298.907 354.259 299.905 353.675 cv
300.903 353.09 301.965 352.721 303.089 352.567 cv
cp
f
353.062 331.461 mo
353.054 331.813 352.947 332.317 352.741 332.979 cv
352.536 333.64 352.251 334.297 351.89 334.949 cv
351.528 335.603 351.098 336.188 350.597 336.703 cv
350.097 337.219 349.548 337.518 348.95 337.6 cv
348.808 337.619 348.631 337.629 348.418 337.629 cv
348.206 337.628 347.997 337.584 347.794 337.494 cv
347.59 337.405 347.419 337.264 347.282 337.068 cv
347.144 336.873 347.079 336.6 347.087 336.248 cv
347.091 336.072 347.161 335.814 347.296 335.476 cv
347.431 335.136 347.576 334.77 347.733 334.378 cv
347.892 333.986 348.038 333.606 348.173 333.237 cv
348.31 332.868 348.38 332.567 348.385 332.333 cv
348.399 331.669 348.067 331.232 347.392 331.023 cv
346.716 330.813 345.574 330.818 343.968 331.038 cv
342.358 331.336 340.905 331.666 339.607 332.028 cv
338.309 332.391 337.109 332.788 336.008 333.221 cv
334.907 333.654 333.876 334.121 332.915 334.622 cv
331.954 335.122 331.007 335.646 330.073 336.192 cv
329.14 336.738 328.194 337.315 327.239 337.923 cv
326.282 338.531 325.267 339.151 324.188 339.786 cv
324.088 339.839 323.991 339.891 323.898 339.942 cv
323.804 339.993 323.722 340.023 323.651 340.033 cv
323.424 340.064 323.22 340.025 323.037 339.914 cv
322.854 339.803 322.7 339.639 322.569 339.423 cv
322.439 339.207 322.339 338.958 322.267 338.676 cv
322.194 338.394 322.163 338.096 322.169 337.783 cv
322.181 337.275 322.491 336.663 323.103 335.948 cv
323.713 335.231 324.545 334.48 325.598 333.694 cv
326.649 332.907 327.886 332.11 329.308 331.303 cv
330.729 330.496 332.259 329.742 333.897 329.041 cv
335.536 328.34 337.244 327.727 339.021 327.202 cv
340.798 326.677 342.567 326.294 344.331 326.053 cv
345.853 325.845 347.165 325.831 348.267 326.012 cv
349.368 326.192 350.276 326.526 350.989 327.013 cv
351.701 327.5 352.227 328.123 352.564 328.885 cv
352.902 329.647 353.067 330.506 353.062 331.461 cv
cp
327.378 369.137 mo
327.152 369.751 326.886 370.304 326.577 370.794 cv
326.269 371.284 325.94 371.697 325.593 372.037 cv
325.245 372.377 324.892 372.645 324.533 372.839 cv
324.175 373.034 323.838 373.153 323.525 373.196 cv
323.07 373.258 322.689 373.149 322.384 372.87 cv
322.078 372.591 321.933 372.139 321.946 371.514 cv
321.95 371.299 321.974 371.058 322.015 370.789 cv
322.056 370.521 322.137 370.223 322.257 369.895 cv
323.405 366.682 324.546 363.586 325.682 360.607 cv
326.817 357.629 327.913 354.842 328.969 352.244 cv
330.025 349.647 331.022 347.276 331.964 345.133 cv
332.903 342.989 333.755 341.15 334.519 339.615 cv
335.281 338.08 335.932 336.887 336.468 336.034 cv
337.004 335.182 337.393 334.739 337.635 334.707 cv
338.132 334.639 338.497 334.783 338.731 335.141 cv
338.964 335.498 339.075 335.941 339.063 336.469 cv
339.055 336.898 338.967 337.338 338.802 337.789 cv
338.424 338.833 337.997 340.016 337.522 341.337 cv
337.047 342.657 336.546 344.06 336.017 345.543 cv
335.487 347.026 334.937 348.563 334.364 350.149 cv
333.79 351.736 333.224 353.313 332.665 354.878 cv
332.106 356.444 331.56 357.96 331.024 359.424 cv
330.489 360.89 329.991 362.248 329.532 363.498 cv
329.073 364.748 328.658 365.861 328.29 366.837 cv
327.921 367.811 327.617 368.578 327.378 369.137 cv
cp
f
347.815 351.626 mo
347.147 351.718 346.499 352.035 345.87 352.578 cv
345.241 353.121 344.681 353.801 344.188 354.618 cv
343.695 355.436 343.297 356.337 342.991 357.323 cv
342.687 358.309 342.522 359.299 342.501 360.295 cv
342.493 360.666 342.506 361.068 342.539 361.502 cv
342.572 361.936 342.652 362.333 342.779 362.695 cv
342.905 363.058 343.095 363.349 343.345 363.567 cv
343.596 363.786 343.934 363.867 344.36 363.809 cv
345.015 363.719 345.657 363.393 346.285 362.83 cv
346.914 362.267 347.479 361.566 347.979 360.729 cv
348.479 359.893 348.882 358.966 349.188 357.95 cv
349.493 356.936 349.658 355.931 349.68 354.935 cv
349.688 354.544 349.679 354.141 349.652 353.726 cv
349.626 353.311 349.549 352.937 349.421 352.604 cv
349.294 352.271 349.105 352.01 348.854 351.82 cv
348.603 351.631 348.257 351.566 347.815 351.626 cv
cp
349.037 346.319 mo
349.577 346.245 350.155 346.264 350.77 346.375 cv
351.384 346.485 351.949 346.739 352.466 347.137 cv
352.981 347.533 353.404 348.093 353.737 348.816 cv
354.068 349.54 354.222 350.469 354.197 351.602 cv
354.185 352.187 354.113 352.863 353.983 353.631 cv
353.853 354.398 353.665 355.208 353.419 356.058 cv
353.557 356.273 353.716 356.417 353.899 356.489 cv
354.082 356.562 354.28 356.583 354.493 356.554 cv
354.792 356.514 355.126 356.351 355.493 356.066 cv
355.86 355.783 356.241 355.43 356.634 355.007 cv
357.024 354.583 357.418 354.11 357.813 353.59 cv
358.206 353.068 358.579 352.55 358.931 352.034 cv
359.282 351.52 359.601 351.033 359.888 350.576 cv
360.175 350.118 360.413 349.73 360.604 349.412 cv
360.706 349.262 360.829 349.177 360.972 349.157 cv
361.171 349.13 361.345 349.247 361.495 349.509 cv
361.646 349.771 361.716 350.155 361.704 350.663 cv
361.693 351.17 361.57 351.771 361.335 352.466 cv
361.101 353.16 360.677 353.909 360.063 354.713 cv
359.711 355.267 359.307 355.906 358.853 356.63 cv
358.396 357.354 357.913 358.044 357.403 358.697 cv
356.893 359.352 356.362 359.92 355.813 360.403 cv
355.264 360.888 354.72 361.166 354.179 361.24 cv
353.809 361.291 353.451 361.262 353.106 361.153 cv
352.761 361.045 352.415 360.839 352.067 360.535 cv
351.532 361.699 350.927 362.775 350.253 363.763 cv
349.579 364.75 348.833 365.621 348.017 366.375 cv
347.198 367.129 346.319 367.751 345.381 368.239 cv
344.441 368.729 343.446 369.044 342.394 369.188 cv
341.995 369.242 341.535 369.198 341.014 369.055 cv
340.492 368.912 339.999 368.624 339.533 368.191 cv
339.067 367.758 338.679 367.164 338.37 366.408 cv
338.06 365.652 337.918 364.698 337.942 363.546 cv
337.96 362.765 338.073 361.815 338.282 360.696 cv
338.489 359.578 338.796 358.411 339.198 357.199 cv
339.6 355.985 340.101 354.768 340.702 353.547 cv
341.303 352.326 342.011 351.207 342.827 350.189 cv
343.644 349.174 344.569 348.317 345.606 347.621 cv
346.642 346.924 347.786 346.49 349.037 346.319 cv
cp
f
380.232 349.563 mo
380.435 349.379 380.622 349.227 380.795 349.105 cv
380.968 348.984 381.132 348.914 381.288 348.893 cv
381.602 348.85 381.833 348.979 381.982 349.279 cv
382.132 349.58 382.201 349.965 382.19 350.434 cv
382.18 350.941 382.073 351.473 381.87 352.026 cv
381.665 352.579 381.368 353.058 380.977 353.462 cv
379.421 355.232 378.032 356.842 376.809 358.295 cv
375.587 359.747 374.436 361.01 373.355 362.081 cv
372.276 363.153 371.226 364.013 370.205 364.658 cv
369.185 365.304 368.098 365.705 366.946 365.863 cv
365.864 366.011 365.036 365.852 364.457 365.385 cv
363.878 364.919 363.601 364.207 363.621 363.25 cv
363.622 363.172 363.624 363.099 363.626 363.03 cv
363.627 362.962 363.636 362.878 363.652 362.778 cv
363.722 362.186 363.958 361.481 364.357 360.668 cv
364.759 359.854 365.237 358.999 365.796 358.105 cv
366.354 357.212 366.948 356.303 367.578 355.38 cv
368.208 354.456 368.79 353.584 369.326 352.762 cv
369.861 351.938 370.307 351.191 370.661 350.52 cv
371.017 349.848 371.198 349.317 371.206 348.927 cv
371.212 348.692 371.145 348.517 371.005 348.399 cv
370.866 348.282 370.632 348.246 370.306 348.291 cv
369.737 348.368 369.147 348.619 368.534 349.044 cv
367.923 349.469 367.315 350.009 366.713 350.665 cv
366.11 351.321 365.52 352.06 364.942 352.878 cv
364.364 353.697 363.821 354.539 363.313 355.407 cv
362.806 356.275 362.339 357.143 361.917 358.008 cv
361.493 358.873 361.132 359.667 360.833 360.39 cv
360.743 360.616 360.615 360.936 360.45 361.348 cv
360.286 361.76 360.105 362.223 359.91 362.735 cv
359.714 363.248 359.508 363.777 359.29 364.323 cv
359.073 364.869 358.874 365.384 358.694 365.865 cv
358.513 366.348 358.351 366.779 358.208 367.159 cv
358.065 367.537 357.964 367.8 357.903 367.944 cv
357.829 368.13 357.704 368.478 357.53 368.988 cv
357.356 369.499 357.155 370.096 356.928 370.779 cv
356.7 371.462 356.461 372.181 356.21 372.936 cv
355.96 373.69 355.725 374.404 355.505 375.077 cv
355.284 375.749 355.091 376.34 354.924 376.85 cv
354.757 377.359 354.649 377.705 354.604 377.887 cv
354.45 378.414 354.272 378.915 354.071 379.391 cv
353.87 379.865 353.64 380.291 353.384 380.666 cv
353.128 381.042 352.837 381.354 352.513 381.604 cv
352.188 381.852 351.827 382.004 351.429 382.058 cv
350.917 382.128 350.497 382.044 350.169 381.807 cv
349.841 381.569 349.686 381.05 349.703 380.25 cv
349.712 379.859 349.763 379.453 349.856 379.031 cv
349.952 378.609 350.067 378.189 350.203 377.771 cv
350.341 377.354 350.48 376.945 350.624 376.546 cv
350.768 376.147 350.899 375.765 351.021 375.397 cv
351.831 373.34 352.656 371.275 353.495 369.204 cv
354.335 367.133 355.141 365.085 355.915 363.063 cv
356.689 361.038 357.409 359.057 358.075 357.116 cv
358.741 355.176 359.3 353.328 359.749 351.572 cv
359.87 351.205 360.038 350.687 360.251 350.015 cv
360.464 349.344 360.706 348.678 360.975 348.018 cv
361.244 347.357 361.544 346.777 361.874 346.274 cv
362.204 345.771 362.554 345.495 362.924 345.444 cv
363.493 345.367 363.901 345.462 364.151 345.729 cv
364.4 345.997 364.519 346.423 364.507 347.009 cv
364.504 347.126 364.485 347.313 364.451 347.571 cv
364.417 347.829 364.376 348.103 364.327 348.392 cv
364.278 348.681 364.226 348.956 364.171 349.217 cv
364.115 349.478 364.065 349.669 364.021 349.792 cv
364.561 349.057 365.144 348.319 365.771 347.581 cv
366.396 346.844 367.041 346.166 367.707 345.551 cv
368.372 344.934 369.05 344.413 369.74 343.987 cv
370.431 343.563 371.116 343.303 371.799 343.21 cv
372.269 343.146 372.732 343.16 373.191 343.253 cv
373.649 343.347 374.058 343.52 374.413 343.772 cv
374.77 344.025 375.057 344.366 375.273 344.794 cv
375.491 345.221 375.594 345.738 375.581 346.344 cv
375.563 347.145 375.37 348.022 375.002 348.978 cv
374.634 349.933 374.177 350.906 373.631 351.896 cv
373.085 352.886 372.496 353.855 371.865 354.809 cv
371.235 355.762 370.646 356.631 370.097 357.416 cv
369.548 358.201 369.087 358.867 368.714 359.415 cv
368.34 359.963 368.144 360.325 368.126 360.503 cv
368.12 360.737 368.181 360.919 368.306 361.048 cv
368.431 361.178 368.642 361.222 368.94 361.181 cv
369.183 361.147 369.542 360.942 370.017 360.566 cv
370.493 360.189 371.163 359.558 372.026 358.671 cv
372.889 357.783 373.985 356.603 375.314 355.126 cv
376.645 353.649 378.283 351.796 380.232 349.563 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (German) ()
%%Title: (Mountain travel man retro emblem.eps)
%%CreationDate: 1/14/2016 2:41 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj4e3niluaT'Mj6+NGEZ+J4&_Ca0MDf[sTIHYb5Y!A[!)[3Y:Tpj`"8m^r<d7j-`Oh`(m2=(W(BlE.X5YNj]p]1^CTUJbkI
%/2dHrb?;AYcaRri^\.&Fh7`]u[T2^bgS3=OpPu;6mUj(6Y')kLc$H_PREI2^/2_IO8dFo].JL)NY;cL*/_*MU,O&-/o648Op$-:u
%I9c("K"OOF]?AK<446b+^h3aVCR".u8p+)/="A(,npQ;NKY..l]@uYpnmkc?/)#<XP[4caN.7]gDcI<_SSl'hXYh&)*h[4U/^R(u
%X0%P6+bRlro$<PJR4D>49>,XQ=-FT1P)nE(3=IX5gLpW9@BVpCZMBPmrmALIW"2GuRC2S"6*o%4nCbpo3D\hkgalnE7iMRj"8UY*
%*UH]<!&DM^@Lm[_a/sZe>NI"hNh?&eZhg<d+%]s&*B'DsSU:uN:2VuZr-TLFI)c6R(k8%K"!X]C;60[VQ[<$j<N9nWeqJ9k]Cm=,
%;aWMK][a&agM\%=Y&'Xr=KI;JW`c=Poe9,7eTqPBS),:egU,T^[1B9CU"!\fLU3Ak799!8le_/Xl"@E[8Ht,t2d4bO:@fJB3ZEg)
%S5.9ao&W*%'.'R<aX>,'SRO?$#!honi"-.#.?q?iXrZ"1F0g$<)sTN!U!dT@>%KspTp(E,?c4*0V>_Pas#3Rc`4Oi?,?_YGln6$k
%N+?)e=50*hV,:B5*odC=(jD="cl9h(p#^i$G45aOP9G6(K+%dmYFEt6f"f*$rmtra0&#-_pZ0M1m:NQ0f%=p?qd39U8oq2)gM*"s
%dPA;:pUs`G7[Pr]_5H[,X]s&:C97^W$mcb!X#^,Z](8_nmlp`?V8$uJLloLR$=.BD;6;c]WIar.;PTD%?Y['U$n`0j;/5:h7=X[s
%g)ol[8N(?<q>cgq=J;1LC`GOAc&!mpBor0@do<13Ta9LiUXJCfY(*$F]E5DJ\c),EY?A&ONr&pU+oT_)=4aR_)]K5lB"QYTbj@6V
%ota+2"7t($OP=(.1H(Hh)ipFQ^)Z%HQV7!tm@[a"*S/B.`ZO`!J"eaqAtl"TGC@u"_dE'a45FC/k.sOUf,CCPEg1m&SSK:U?omDX
%%neL)d;h+pE\OZ2.mc9KKP+pN'[O4a?Z*W*-Iu-4lLn*TF)FbPqXA7u[HLM;0%S0ANMZ?p$bi(U:&T3>Doe9OZ4H?V?E[QJfeF]\
%$gi-%A=N-uX^5^C)f4Ko*j(9$m!jkAFajI:q/XWdXLf!`O1&Urd2bT6r[?<DVU_<H9)%h6ArY6D[ZUf]Fu*Wfb[Io&E7iEc:"&O2
%d)gm`?Q&A.CV3O>R/r#6=,0+ND7<>[*L:m9Mc$HR1>maR=+s>3`aR#8]GRPpatEMn)3>eP4d->?EKc78?@,KGTLQJ<na:(o$b)rs
%pm!"E0e2R*8)3A<a<V4u$CsY-]3FTecVd:_PWEUccT)C#%^j#+M4(jNM\4\oFfMM0lAqN5BbpMiUA\(8k?NsKUNa@Jm[!jnFCOLS
%)26=<$b+Gdpr,S*\oX"\8?Mdem2ogM;/;\EJjTkTXfdQ"[[XsR\b]"uT.Cgj6Km_(3HKa#,atiM]@:]+1S?L:HH#eK8$#)0/-EN^
%U/fQB\Te.9MUh[\r5=j>4(K\@gj#N3?!KC.il_4<\8qK6P1YQ_f?IK3ilmBMB&_&5;J.ULd--qpEZ&EO`0VEQ#r1u3rc*<4^>-Yn
%bNSqM2p%E0KZpjoj^t&&i6>h#@f628V<T/QqY"?sder^OSY3TTrf1_e3k717?gcHkB1_a]kiu]_Qoj+rZ2-tMorOROS94?Q[K<%c
%HC[g5e6"d/eAg6\c>Yt4/7Q;5KlT<a%U#TRjU/tQ2RX]Sl.+SHmo6p^E5V]QL0Z+/D\0BnalRYIO/V1ko-V>HLM-K96\>,H4\KV<
%[%";Frs9-6;fD<RU9Em]q_Q`DFF*?Q;RsAE/nLfbU#oG=gK>C*PLJmK9C8"Z>0TOEOla)JGI]I3ZfAOMCim7b9AqhnE_RR7=l6M?
%OMJAQ_mYg:NA:0_`Mq1:`d]b:nXh>@0fGN/7X%"":h]"C/S!P>lFO5>Y,0Neagf.=B*L+1#SU/"+3/&XjVUJoOMQr;b/3jB=31%P
%<85f'GRi\?O#IP]"`]99nAa0/5'"!fi*HMrHO[@@:!8aPCL,fO^-PAre?3p)O/q(fkOUp?*3Z+NI$mOoAXMp9&+il0I8ImX?;#&]
%]*,[4kOD2H0raa>DqS"]UrqjOCp(Fna3T:\\;)pt*QaZR2%+33bKXXIWElY*-UXVGEc9tbgtT>AF\GqW(jE:1JA\d7`pA)-Ms0P+
%V:Ni,Db7jI_PU5K)hL#tXaJZ8[gqq%?3V]5L2P(,&7/MBP)R$B\k*_#-GjOB]`')Ci?m';h?4.4'4)a'K#FGlG&f>:(UM69o6LW&
%55r3d`Bq*fp=9\&THM-L?.0#c16c$>*[nO]P<#[%,gAtbX5L1ir&p7R*rc;)S"Vl!OOa-,c4!6K)qA*4OF14q/2\?rqKB8Q/SF\D
%:Ns?!r3e@k#VV7rkq6&=D2P_r$U=68h_KIWC0aJtF'Ome18NX,Kr6a%4e^Z1O7pr@M\5*l/ETaVE1A67q!4lJnFBs&,d(?"7t9Ub
%4<ZH9ngtM`NBMJrE7r7'4#.puD(N1J[pT/d-VMI=g\*E=,OO+JokY@)os'O@FIQELU?:"b:oaOuqK\AA1X(+";EH,dC!/5C^&<-G
%3"(#:fp*GU)3/:3HB:]YR<DZO.2bs]A9n)D>?qs^NFjDflme:D^#Rs0g%dHgl,HeY<X)!W7PC2-2:8oN_r:;jKk.ef=$-S6PtDKM
%8=9XhIab@7Wa9I?9,TA.PY:[)IYfrb;M1iJl<0>i[Gsq32"RbKE!%.nRuJb[-tD5/Q#Au88er\T>PMZ*M)%irfh?3;p:Phf.T*Jo
%EG^:^2nTdb#64+"Q<3W([4#*s1`9!1CJp(R8RRU//]u=7Si<>Y,mt@;7X7aD;'r\!A"n!]FtJUM5>[9$8\C+tNk,P)-s;YADS_k/
%?Aju'Yf<7rDF,pI(*p&B"ZId9.+]V8Euf%21,7Q1UrHE+jn4'b02ibFj<Uncq]XSS+F`Q)Y&X\)lM\T:g2<&AGO5<q_d1kkJ).J%
%R'Qqq-EkWuI73FbYKT]$g1B>K0Tg-09s/%edYV4uaL)s:f2gT,R@%bK:TW@tF0,cnSOg/F<4eZ"Ri#p":9*+q@r3F?-;s5/;D"FO
%gANZPl`[(&bHM0M;[L5G)dT%p_?h/mfRaDK:"\YT)f=1*Wn',pV4Y@Yi=b'5r[U*4o3d-7o/"m%l<:YPQ!U?A?;p[OXr]OJ]GH(R
%*cJT?&"hXM#=Ii/\6OY&6gU=+moVU)Q[`4"q>\*TQN,7R(V(Jaf6p"n7_)((:S'umM;"4ZMpc=u@?c\4qRb(J>R=<97]!\'CRk?%
%d6h*<<@r?OR07'#m?Mu?Q[/+4ge=K4os9R'fm]$0gg-1]BO%#^r^lnD3llhEUl`Uq7X7H`0^dr%gcTI34/+YmH5V1`rn>GG1\^j:
%kJW[Mj1:OS+@D+V-k#&W>p8*<LjU56L$'!Wp3>V:<aKSJ#O`"p#8qJ?X*eUe#P[M&\>3[up,__ab2caj`aAANhpmC(gU6J.EOD:T
%')S;%P1ME#EClmqh"7)koG`_dmnJ$DEg$HnjF8QQh_Rrt8cEpss#hr(O9'O+q2@(?P4P7*Hm^r3b@C4GIgT\KoDJj4rZpYg/qKZe
%cM%a:DNaU^jEtllL9sk5hsY.P'p5cas3-j8)\J1j9t=$&]e9TGG1PjMLRMS<MjM8re&,F.2T2q>A3$_i4g#.(T@J8$q<,^FenYMG
%?"kus`nRm=0Ke#sN/pap-S&1,[Eb_;`_@II,%QlCfg!H*2rlnt<D^s_[&_`s]U2XJH1?/q#L3'/C<_(445[2Ak*ta9j34%C,]kq&
%TsIG8C_ArOM:s5(p+)5n`6ZHTGIF7TfoXX3C<+$U=hi`N`'Hu<X.m!E"$4uDr09!7PA5H`@@CYbhUFU)qj#a0'\0m$2gXUiP5Pgr
%)0K-5ZBuTuRoNC*hq2U8(<"FZY5Hf_q_V6aj`Hh>6SO/b9icUtJC<[7=(cZI'mom4LQa'9QV$+H&pUtWJJSu3dD1Zs_D(sE$+rq5
%0.1b0"C<F+QV$+H&pP;96!#(OWLjij\5'F>P5nLQAU`/r[Z*@mXWp@qm7QcB6:mBVf]9;oEP+e'[Z;DeqdU:B*]]TM2DH74N;I)u
%g$;b\?Rt!??R2W&\soPMR6gT5W"^V?9T6;uS@lcs;3$j,R/XO`2>.A4]0a%d\oI9Be,Q(]]T2g]9+^INoqfdr934QZKsfb(_c!?,
%kN&Obrm&tcf24=%0Aajd2E!jU#LFgLfrpK_1AjsZjXdAe<7pipe^7J7*&@HG.N=@+gQ0&?C@:P7Wa0R2]3<<)P5gOn]1S[P+HHJ[
%5/?&9h4*X;N8)JP_UQEp3L#AUFr`\%gU$<S9VHse.[`oV9Y7@RGIEtERDWdJ18oZ>X$UIMp+rA*`?)ZYF"eOG=U`.tZj-hUN6)a]
%P;pQ>oE9&6*$^ih0uhoINc%*%,7>!F36'Ts\s#+nFj[R[36&IcnOX^1'$%L/E=@)*h,:+ZQ\g38'E#38G,a7KeR(7N=mF8>hh<#u
%+9"l/.fYj9H*.@.Rh-abK#G':Q5e*9DQR,,.t0S@1S`c$Xe+c/M4rL%Kq+FSn?C>IWDd)>=+BkBNH,f$m6piP_C`rp8r_]tL<.1q
%17_OYnMM'Y2sR([/"bep-+_>PMQ;#F=PUjXP-RWDrH@cl$]2.A<FKo8*_X)<mfm?#9Ts+A7\Ved2X"3b20h+DQ\SkH42(>oY:^fE
%SV)MQkOk$4%dUWOh37"fINcbgW'I>!h5#Y+9ZUJ.K!-`HN-Vs8()4d'fP@.SGL*j#I\"?DPCu8W:$Q%qQ<gtA!YCfRZ*-e;gUaq8
%ljT.Y^H.<:n`B`tI(=&;DrT#9]X`kX2t?%M^_N;_F8r=#Qbgb3G]Pg[S%F75@2".Y3r*h7T#%q6mT]t?-LT[-SX[-1'6e?Rc<\j#
%no'[QQO0'qj3Gp'2o)-1L;`l!FRP^Db!EY(7C#\d\XVO'h6^O!aETLfghHM;]do5][@+ZX0mOj^nil21H<9)1LuHGX).P8,p?Q1j
%l>K&9mF=kkU\UF3R]TJuf)7Uq.9tNiriBah;O_i27>i%5!dj9Z.O-"dNK$t)Gh8+:rn]^k@isdUatMeX9KRVEEVY?.s$*>W-NWH^
%$V6>JI(LOkFnX\m*HrB_)3\jRp_h4]3kb69WEe73Qa.Ku6d;eAY7(s)R)<0H2EK[BR6Ok6jC"VHEE1ZiH'mh[DB8NbBeXn*7?L(/
%A;;m'4_:.b6oiaXUJ;^dD.'snR'lRYg2ScE0!O7(WXbH8Fq`_e$8T9:;m"5M)'d)![T@9/'l+M*le)oV1V[rRPe?<O5#&,h/+i*Z
%o:r],46W^3TFA+T3RO,,>0TMoP9k=^b8?]Ua^Qo3l(.855@EbNN1r$]MC(7/`$W'?+koIU?#-5!VA1LdauZ!DHBVb2,hQtbT0Zm*
%ARYV6/*-[<`otfQD2*#6Y7?==kAXI=_@R46GiNbo1Hn/c\6"GQp8lC2CW2cDX';cM2bUP74j!#g'MIgsp[G\]l1Zq[b&JC9bIB(C
%/4+WV*63\t`a(T2d`i\W"drYi9Q];_2ib"X]T*Tbac?mkX3pNSK];YbO'fJUCIo*sn-u"ZorI'g5*p:1ec1VXQfob\1HQ(2QhIJ5
%pbdPgkdVnUAU)hb>0(YEB:46=IHj0P`g.^Q&7X)W3lq-%='EqGGNYKrY%rEoO-d%VS]>O+/LGA$F`]u(O%nKP(iLai]a9a1b[rP-
%a8V?_?Pd:b&p-#YO%bKghuB8-\H]U-9:0L)cU!B"j+);jek=;P$G1;B#F?[DCW/@QXq=tZk-;8jeG-tT^-Y<#Bc?3QI^QjmCL:NJ
%A)'hh>M@8@]%8,el/XUQ_27ZnXPq3nelOCs<dThsf!Q2:2i5WH@F!$OF>A2$+g\3r1]-;BZ_]0(%\\f5/)<;S;PURjjd-\$OQJ3E
%iF)#I*ga4^Y(bQ.L\0m@cUm>1')F<JB?=AO?CuI%J!U0`-'l<C`:=_Hi0$<VFLSJd>IuDF9)lqn#kJ)NIGJ^Uas_WhACeP_WX#q$
%qO<!7lZMN3pPJRT6G'jhVlDgF-ncOa59'M.e1t$;0[B>pQ;0KpXrY":ec,;DDF=Dg[i@X+E`V&*@QSPjK4A&m$eN>>a.@.'JUE9j
%aE,=\b_K'V\:3j5$2p'6SI[sTf*hEH?!r0ECb,60p\B`4X8H29gsW&A.^B3.-=cWO5:&0rd5fs<Xc$7%KX&du#Ia#R5!E)WA]`Bl
%?5.]$^2eTON_]QIf.I$/^e5m3^0J2GIa&Q*d03sYI-=cEG$;*X,*sB&a)Q&:Q5t4lRL>J!^ci\>P*1o6MNBHfaN[Vrg?hoUNQo0'
%l^msc-2fp]2T)Q#9AJ;%@-<9Zq"MN]bOY\0_.rgf?B-bkA^I-'3K:=&q3ua[14W_Ls#f.RehP\SQ^/(.TP)MW(0taBHcP,:'MD`*
%LqC9[&ch,"Ih$0R!Mn6'Lp,-*.aki1<rT(,r_'Sf-2m<#Su]QnmS;SRFE[[4[6*srWbuO00.q@#qlAris*="@8u1sq#*-'k2p4_A
%$QiF/8s6&-@tEQEXaqQ$]=>XUg'Z)@=1bYm9a4#7c2X8$nUKG\Et+qW]@jWeL=f9KcH(%S=&'$f(CG55A/>Ve4!"M84NkE5[s:(?
%ipW4skZk"gHODl6pb4e+rY'[cI;rQB5J<YX`QFbM5KA;gYCRtfe8+08,K;n(b!"IYQKmX@SEUi>\V@q=ra$,ZZMj\S(QnOpi2aoc
%@a$GUZ.@UK"J=?uLNR%A2&Gb'9Mc?fZd`f_LX0;5.n7L(FhbQ9XrUaeoAj@UG8_FtJV$b:]_jeKnLu(RYDpL^NiUu674bM>_IDO)
%o3uT=9R%frc)"SS9:r&,[9<S_^.SoaMUgK)C#:C?.YBI?4cW1+UQ[7XBf3LMgQh'3KV2Vo1-8<HeaeR,2kY2thB"5]Ya-g3]$9#2
%WRIuXC]CB**4E'ek?=]_[@QX5NdLFbdGj*.dA5:[mPRZ)8oF-M[580EaR(oY,#6=X`ZM&&p0b&&c`a@6>44G[<UDX/4VPTrmsAKf
%[WDCdQ.VA8<c1nQd]GE<<L`AjVqTClS74.Z/CP*h]]mNJFarQ)X+++7-T;`:[G64\ckZh&s&%#us/<A1#cMkukY\M7>(SikK>2Ho
%l@Il4;3tmu>H]oa\PBWi4R*;!l[m^Dl<hZ\LOL>oTr)[ujm4)>Ejs`Im?Qr_?4CHfhsm6#b]Crf\V#(5cUSd0DYM%$Ja^5MfhLk-
%ERQo$\V,6K7u_-V8FVkPc!K`6[PabC;R`).:P7VlA?Q5Q'!$7Wm2YgkS"uOJYr&cq\nq#M/QopoSX^Co?.<Jn8o7h:Q_i:`_C9oe
%^2RE`>Bo+EmgWgKKu9eAg-[s3R?7-&&5mDB;X9YBC1*":IO?spMX/hdNItR%TUOVO[e^6i8,`D@XL@X7=L[uoopP0amM7@jQ+sm4
%a`pQjLrl@!;mr=-oB?UWUVb`"Y?k"*ohIu<,EZojP,p#fqf]CH][W57lcjIL%[#.IK@+j-^U<Du[CoT\C7G3O#Q??Q*\%)4R]Wsh
%+9%EbPlBB4^4'+$$Kl;,>J5>q5^1,ZQY>]\]?fO7EjK&N<^pmsma:?4pN#.=jR?hj2*Lfmgrg(rJcAJYJs3;t8%$p>LnCFIkE"10
%RG@400lM)uK2Y"f\0Vh;/9c'\jHSCF=f1/;c@mJj/MAo+>*Y8aO9U'ZgfnR\2fgFB89:Jg'=GG\"T%h[id[o[c9Ue.oWDnK;Fq>@
%ba$H?$Uujf:(D?M?KUnCl!c_k7PpP9I@@2oW%LdZbNLN]L/M;88p+o?WMXe[gT&&<oM1\.dZDlrdL+_+=h@Y46*cao'r*,$<=ISs
%*ICn%CG-%A;n]IR1YD)R]4P5Zg^.hFmT,iL)T-YV]OfgfdX.kI12L-_@/YZ-frY-PXc&e'YGPmsjj_c:&TFjQ40K7`F6$Bt31lRp
%c0f"IDN0eqWM\e;T.+P^G:MEJKMNtfQu\bC3V0SR3$P)D.d,%S=%d(H6eJQBG31e0%[s8R9G54@VIIo33rDiLgS^L#h"=EKp].g2
%J@RLik`A(lkE!.1kiODg<dVSAAAFfYnDO'i^B]bPgu$HP3`R=S.bLOq0^>UhlaYG.lCaK`*O<.mVkR`?RWk7'm#C=?8t@dUcGk'A
%jVcdM=.Z,]@-&7E&$LBQ6.*X,/%*\L&N"=%l96h8$_sFC.Q_@2GPj6u>H.$X@]!YGUMU@H(1X%Bldei:+&4%MOgADqT?!aD3R%1A
%pU/eZjIpGVV,mSVX:5hbr)#dSg/2.J^RJm`gXA3"[f:D7ZXt01jJ(Z`fA$,8fc\:Fq)i."N>$<`C3IoJ&K#M7[I/%6Pt="GCqbr'
%b0m_d3_\_LL3k6gGj^ZYC8Z7%33cg8%M\3oY\B\$\=hZM6gZ)DcH"4$_O%^=@ptO/ET+rehS#T"`U]b\oHIGcDjZ\$UD^)\XW)_(
%[E_^3BNNR_Y!Kt3LQj^;bt>C8MZ96r(aiO)2hhaQF'#"TqNbZljDWNfnA2+]DGmq'-o)J5!s@-ZY4[]NX453BCLFuaSD<GqT,i[^
%cC,+f9U_KtY]I$1kAC^QQ6G;RS9C_uUNrFp:i!&^-tb?M:REH-K/phgBsoM)Mct3T*2D:OB?st-M7>Z^bb&RSGLD9h_&R2KVJN/p
%0n.Qr3\6,c?+n%pWnT569'7[7Qsq9&)X"-%:;0Rg-m@#[Se9NcE==Wd=oB4r8qh30ZM?Pp^!92.pU"4n,1X#:NHXnU5sI&0/o&m%
%3TpYCYZn0+,+3(#lBKJOc?VpSNEZ!qZB=io1=13@HF7Z4>hJOb0^Ta$7/J*ZYp#):cU0s>pk</[qX=RcV1)onp0qlA]gtYmZ:nDK
%;^.aN#d!+\IccN)+mlT]-T\,*HG57W>0-N^28,B>r$6-<?5XWU.O7a;;6!,Z[DYurCbMuo7=J+HjU/'5ms7bgmX:[5GlRR<I-JPm
%$hrMtm*]A?g%"%V60$OSeQXh.pQoZlI-48opA%="HZ&B@ZR;rhVfV1=hg`&dmZk]?($AS=fCll3QIRF50-8>>G8BAVjrZ3.bd9Eh
%SX7VHR:^GfrDl!ooqK'?nGLQ-idt7f?EQG?;D.,'pCC$D[9iYW'8FKV]5ur/BAMSA02(0"fpT]sF1kLSg[6+X57)6%<f>h*pIjE0
%pYX.N`I7'khT4+4K^jNdm`jqP$TlQ-GA#6jDE%<$ET(U(bMlbSIlq#,\_C>ZH</^cBt.NNhf^r)`VhIY_km3=rPRFidU@@q0`5Gl
%mDub``Nm2V@r^JlrV&@7/@r1cp#'Ua52H*5>cXs^>+1Gbh^NBfhJVO$5*RN[R3qns2-jN;qer?t&&$fpKu.-ihXo7^R;^Q4bP0ns
%/m!B1T=fMjqf'8S/finLD0fcCrD9E#X[f4l?+]]FY4hNWAZ:.Ql2B</o^BK1qY%TE5iBK<r/3pDV?uDBI9A*Xb4gsp+2=7o'H[;R
%\/'g[3r<fg?!ak8O65g.OQGJ[c9'^in:!6Bmol!eg@D#%*4#P.n^Qo!Ff?F"*\.^BfC(=EY:\OY^G6K"\0b$Wq]+C?&hZ,X:+s8\
%I%GEQDL^WT:E"E\V'j*sgGkMF_>E.b"'bG/l0(DeCC'Q<A_jZ,gjW7N<*Hf@H>E@U)q+rbi[[N-':HkoqeaU<+4F"d(X/e2pF@o)
%rUS1T2]^0=kc>'oJ$>fB4B\(lMGFa(Rt9E\?C7pDJ,PY1fjD"C\$>!Adn$O9(]>Y-)(`UqHG"r4<KAj6el$LSgKgn(SpJ5Ni-W#=
%;uAgbgjetea%E=Qs3=NHp\%=oH2#52_T)/pAoW=4p1*X5Qam3dB$'q[Z`>&A.B%VtfsRa8/U8EF)lpsHmrt+6hh+Gjqo<mk<gWP&
%g9QK0^4kNHV)ansgAZ*iZEUV5nE"ET604s2:9rKo![*&3/,s5Xl+>@S7HmATPnrP,]"\u'??COlOZThYWLZQij$W]E1=WaOd)Ij/
%9WWWAgc]Vj/NbUgX1p=!Uk=A>$`c^iObYaA9?m7tan$G-h"9PPLS<f#oWZg)4oq/F<kVUb<nMh/PAV/5>P$`QVtOK[$eE2?-g/=:
%Y7%q)i>i5N>B+e.l<`emnmSbFZnf=d?QILonA3-lL!B<`"baH8gi\!?OLtI!q;?4g'@)s%DAC#acMNggYkbs2DJ8OsSup5^m)>`[
%,sJ?C>aB(240L-_,&Ejh`MN6g8#+YYVQ"ab5)/sO4=cHR4S)mM-D0_gl@[@Xr+aXZj@hd`p'nK'#,hi7jo*_pU)tukZQ&?]Hh-n%
%G;GbspukrJiR7I<j`mc]Gh4M5*.GCBA%\?"&("LJBteakn'-TZ$X<L`pSHW2HV;3IqOnLl%uU8YT*M[Yk+R[NQ$4=A-PB]sGkkpk
%?!TR;quQBf>B.tNHs_,F\(hj=GH\6Yo=5ojYKngt\de95VAV4(^9AB=Ni$!feV.Z0<(bYig3QjnDi<hFPj#QX^#$o]iud^pRchVu
%+R#eBGT[BqDP(YTI@Hg8lg0Q-0&QAhlsBX3@Jef;Ab0bDppR^%HoWiS^:b2*Y^UN4rm][SD"i+c_7+4hR3n$U`HHOpSfV%';'13k
%Ge108#fE"*gX_;Nk=+^ueFAFoX0Q9LZmu=Yo]"ok=?_.X,-]L))J1'BYm7-t2_CGh0;f;GPFg[ndt;mD4.5NY$p'K1eln>^:UfE6
%pS'Q#NE^"`rW:Is4V4MO/tO%-[JYK7(Isab=cTWkX5bV6#Yq.^E_%bI_:#d/b\4qQe"HT[?0X*>jK.YTAp7cJ`THd@<;.3bN<O%h
%p8RuUF!85dS:Bhi@^;+(Dc3't>PdU`lXZ6`Ku)n\Rc2^6ID2%2N"[QnR)Z]0/D2[ZWbMM/8[;>`4/2*HIk&j-Hnb6X7@]'+Q=D'J
%qC*<1HopsJBS0r=#'l_+)kV#MVst\PbN\ub(S#*eIOVk`N+>FV=JPE-I3jH?YVphffX-iu9.)N(IuN@JUpsD:rqp;?<fEr_IX%T7
%1H;]!UXebLOP4#!@hd*'c9sV\6(1b5f6;9oBQ2Yl^6!$<lQ6hO'W(IuJ'^d_nR202&L3@U+KV&%T#U+-JrSh);$%r!li#^rD8M'^
%STc_+X,H_Q45pM34)+X*(E0#2&(Xgs^%s^tHL"u\C<`dHbsdHm0RH=VRGuWRqqH$"Q>9iO(K\aL5OPLg9A(/2GOoWp-Z+c8^Se[G
%Df+.eiDPR=ZO`Y-9t7b-i:hfN)tM%NgPbOg:W:M4]rb)LQS3h>V,:FMXVS>``Jqk(YO+Ii\+R^MH[(un\e]@jXnqJ&m'kO-a_r:"
%p>E8:Wpa+AjdDZ09>QQCRrU+JV7hLjp#4'bJ]U=_l:!?Im#A9qIZHBbhHej@&H<ITE*Qaem]5#aC4HhdFIR,2HF<Em!=OM\-+:Jd
%l2TbUAFNi;5lDdqQOKHY@Li)<FV`&t@m/lrIm"]p0Mt!jIW!HimG0!s2LThT6jn4C<J-u_SDunb47ThPs'C)`'\o#m*pbJl=oA2:
%l-8$;?(/peMe@2m@]Rq[$E=%sn1n?Uq];%-3sWe.RqIbSd!-VGX0:t+2Vu.^Z55E!)BGp?/>#;=oLTTVm.8'"V0[+MRD+5G1N3k"
%0=AAgI!0V@.X^r%!TB*FI%':`C]1[Xa4'Y:leuj8cgY?YmMfU+XKYu;S<iRJ5O@sldg]s[mB,$NZTA\uZ<p,Y"i16&e'[RE_r#CW
%abk:d',()'(PMCA!_Z%eVSuEch"UZ(1'bSQldCpept"A]50[;QQ/fH0UO"ZU8I%nh$S0!TqkJhF?b\_9]t2YUJN]R9nStAs207s.
%k9qmb^K>fg\[^ldpiu_j/@G6BDW/k+m<<NkP:tdBGKi$)moeUHDf=*.Drp<23ZHWCM5_0^4>H__HYStG:RS8AmIoLCDsl0QVjq2P
%H92'8%cFY#+"sgo#2a)G4^[c+99qa4[W?6J*'Sj(`:GWpqd8]75Ou46H>>#eMs]D.4C<O3@)`l-oj/W2R7]ire^j$NmXn`!^su^q
%f_aB)I/dgThV@)^G"o>Pr12o?P1?Hs*RAAV0A6rO)+ltb2n)hZB[]-m%ulm7NLc_]O"-8HRu98Z*Q0DQBB.K6^rG@c2YWPRSQ`hu
%_sD"j.TV!LT,9=N1a"[DRp2W2'/k%$B?MsoCbfWn[pDE/4SZG>/\M!p=7e$c^O0<9<fZ4.KES3%'6jGT<Et!%>F!ZRo@B,<"q3?B
%pAV<]=8d<GC:<F'k+ec!I`n$C[i;\CA/_$1p"S]Rb3mlnT4Rg'[haHEI@]Z(YerZtM$sm^gm--?f:[a+<q[S_WXW/jPi&+tiYrWH
%IK0I"I/g4S4flu;Bt3*(<*-eOm-T\L1(W'Es'VZcD>df1VW'NY$K"?g+.2l[gPZG8hqfld*S3J.q<pN.$Z@)(*Yc&+VH:SmGFs9i
%Q]CE)4)Md3JpI9m\Ft4H+Y8^,2A'**YWZasdE]EegT.rqmsQbTbEaa1UH:9N(K1jAB^uS-!6pFS]151*nSe$rGIA#Pbj($gh<M(8
%57I87q@;]=g0OQdq!LndgRidtNqqU6cs:"4;n1oWjCa7^]78"-qtt9HN6t_;N9e4S^:um6]Dq#YfQo?-e`+X4%n@d%eBX\PC$*/e
%5Q?1=X*5)lfB)gf'2@Vi?QU7BmPah9@(s')e,3a7R.Td_[_M\#fl?cFIC/n.(H/1)l#oR=bH!ufDk7.TSh7]`IeWI;JXG4_qpoC7
%WIJa+8MC'6R>kf,.ka!^*cJ_GIkp"'o"q=YKAc:bO66niqRSmFONg(?]mZrk^\t:F>l3oK0D+XK'H0cuR\L.FB*6lBBU2lmX8PP3
%@:O3:jl629.rCTA[4P'([V+VA,kPOhr).fGglK35>5;.bhE/!=nb;bU*O,d^IOm;d2]cGWL.S7\7Ie^]#KrHF4^C^Cb*0ks4,QYi
%UVb/K+cNmD:[T"mhfPNe<GIoo5/4eB>ki?D]"E9lp&**FH`[iD3\$)+;L%tbn_MJoBm$-%9eAlro'P<MkMB8N(8FoWQ_DV8e#YM>
%*qHssQ8T8[ii;_0n0e[jlE?5GT7kO^6f7h:2#jh1>-:E@Pn$.YDhLTohckK;^XGgbrZla9/*=;jZ\rn.^E9:'GPTicnCq\ffq`N^
%I/B\s+;M/'/Ga>L#k$:d*EKq(9=DItV0D"r7^)UbCSt+$fiq`bG];j6>G9-!5F.<gT(o4?k07h=cAk*9J=<sF7-Jo?`J3,m<8?AF
%Ma(nB+/`4\Xn1Z/Zb*9I?7r[)J*e$GS*g+Z\rB.>*]u].kel]Vr_n$V7YuTsM]kL`<_]dJ4!22g/B9t9/3\E$[jlPk*,+EAr9dL]
%5OSI7e6:rs*73Rd/NslL$X_j`oVMjW@R!TJ5+Hp1q<e"P@Os\>?J)KK>k,h+*\B!,C#)N?ARZ\%Vokda7Tu@N:Vi7(hFbVVIJF'k
%_]CNA>B-WL=.PnE9'Wn9ou9VWDogG7q$//<l[C#4I^LZgn8Ye]/F60'0obQ!bNQ#^VSoF=%d%(l]:rMRmbQ%(Z:!,[cK6Y^kf<(m
%Y-@LmUL6)X=5O9tIButs+5;6anTjFjdWhVq6SD8NHM2?`cLbUUE_J]Hn``JWK1$/s=fR78GN`b.KP5n[7/3tkdBPPf]>)_\j-l!.
%]R'Rm>,p1YhbNtB.8!74o"C;OCZ0`r^,JC`qF.)aWZn?\)p'/%Ygm"I(2#OS<"];uW7PDMOM9[1pK#GO"^f3s\^b"lM70"JZp9(&
%hccp>4hlJon"+duhh-K:1r:_e-1ZC/cND3Ek85-/moQAFmSD"II[rX*h31pWO"]tCe>rCB;p.#rg#"G8e5m`f%J5jZD4f('i8l'(
%Y?0_%<%ucs3hPD_TS2M3<fa084ST0mk4PM'mC<C1lR&`7GO(:k&XYk41&Q!p;M^oe\k&XCY"lZtICF%-4mpNqkO'>uelr[5;a:(t
%9_4D[qJ!K$/38-3BWlQ?dL[,-TAGg(M\4UKk4a5Qp.7R*Hrtc\lI!p4PB%5rpgM4t@Z56/XtCb$Z#BA[.Mn:g5gPfZ!AEDsd*R,0
%N0K#tL$b9s3LbYVNM1&WUFYH_DnC^:2ZF^i`S^l]M102=Qb9(c-$]1XbI]0M])6sOn8m\M\7!''0"c2=(14d\poU0451pBgg1om/
%b2W>c[pkJSDl,+!k!rR-rhgu<_u$RQ<o&6i,a(eB(-<$jr)S4@_A2@N^!mrH?'?I_btm<DDQeVqh=g6ta2J-FphaH:pNnK:o&J\d
%\4I3\X=gT?%8lh1<F8EGilT9KNq#+fmnH#Q%"Be5(dV3nANAPK1`'Q"\*eX7*CN<Y.[BSMS5XaD\Q#3/GFj6XoV!F@dp3m1s0To6
%YC!t5DdRgGW8P0]k@q@ZZfCR0dKa[[EBZOJrC=3_jn.G*'cME(S\CU5)Y0qM9Wa\^gDCk'S_1>WHa8DKmtupJdi3[M..)FkkA@^b
%fY7,onb]m?J,FaDb__nip0MiAbN]eCL"EG++I2i3FFR_sposIj]J/sIj\d7j=i5LYC;>R/gUEBlgAU)_N9Req2V(d:Yjq9Enu`3>
%YnPF0Rbmrh\t]%H^@]/8*A6cTQ1&ou=5mh/jm.]>[j$025E9FW/U4ntq7@4sl`7dm3V_llmX0)P*'E_W?9NO0$QEl"VWk=W$tI$a
%>N"&sIA,pfT2oPg7L)TCHZqA:!k#3f#DJ^Xk@*l?Aa/GhnXueuqc^4Z-gZobn1j]MDslh/nOr90m1d,(#GV)K3p?@?1#+_2LPqGN
%i`^d+r<Y9qEo-_CHZeW8;M;C0r%ukrD8B$O4m:(F)LPM6AT)5#+,J%4WB\4dG[=gS3shd3MA^l:-gb*&iV:XP9'P+)R6oruXj,C7
%;dULu`UCb^\+Zr?!gCHE^Ws$"4PpM.5.o\bCoXPUFqfNaEoVk-!&<iT#;X3ckr=/HGPb%1W[0mdSR-S!*=MU9cNl2kFB6O[T$'rK
%n$VT%Dc]-[M%AI\PErU>7nc/I[BO^SmUDI]n&_6:cGAnogdV[ja.6It03Sck]fUN2H+VJ=9b<&s(E:gjV-cnE<180agh(QVg`FBc
%PGYcMGsaAN`9X+SalLV#G3P(QX'WJDCXoJ>':38`\ir'Qndn6EZF&HKWqfi3hW$bhAfLKhASK>aQJO[+<R8?fQ&MM'T"*Kl*m=EZ
%CpoDU#PJ+lDk/1;?SreIntC0,(7Te3o_l3sf+1AP?!lSgKekX'_#d_K^W\2W\?33mXOdZA\``V6G6i0\][>Qbb'TZ8:k*EEh7PT0
%"/OOfDkaJfr+![Af\t]?SkZ^_WI;(F_.+HWZmf_ucG@Eb@/n+$b?C[(`o5.%pgp[N:Ap.-chON\RAcuX:QE-*qbh2E3Q9^$Xadh?
%En%gg.LJA#iD/g*H1E5k)<./Pjs)eM'X`1RGjLAfarho9j`Y^Ke6Oa+XLA/#8D*0.lCX+c2sD;UZQ/<\[`lP6VY+,f/CH5I,e3W[
%R*4mE;Yoh4H,fu$30THL\6"jlop#($p;?uCjkDT1I>SZ`Rs%f_r4]c:Y#bMmJkMb.O.CI]pf4;AoKHQfIjqpIhMm.uQGGX+)3ELN
%*ahFiKTt+^U5V_m/s&fp*"#@$9'pArHW\O\.g.jU,\ZU@ma&dc,M+CCJRM32*0g=&p+n0^#:e&b3r!`'VBc]HjE#6$**E3rd=+Fb
%s(qCL/^^[\Tpr&#$XADrH;LV!Ej^YqbGFQ_R@Ht++.sc=QKpF`:q<$qnZdpKY$TP*5OlZgWRVXT;u5kQb(j*g>,0.XQ@m"qAi$&!
%:et-Jg`J)Gf#dS'7sLssJ%"c<p:B%^[4WfdP:&.3-I/7$]Q=,E@Y&(b9_hn'6Y8Aa3cS7!*4a@qN$--2Tf<"WZMhc=K/ddn99"h]
%X,6'70=3!JjP[J%*]hIoGuLmjN4POFhH)_KTi[L3P-q(T51d*rmd3<M2]LR)&5)(0>X/7GrCPskhAsGn&9cdE:?T>X+Y>hi[Wtsu
%drAf+ZCTS)FI*4#!h?a_rO6Z"?mc#6e@_!ZSp.=a;9IQ`]aL-[$p\U)DKY-HGJ)NUe`p<,ckEPS+'?*f4%C6'(DG'=\^qu$9J<9m
%g>EQsWR!""SbkL8RDkqeERe8qmPd,10<dN5]EH\52>WY-s3:^#ZD$qd2d^Ir)CI2aXYl,ZpskArXh"6>_kqk_jhu(Ugr6I@@%%$i
%r;m66?i;u"g\gmTrZ0!=gPKs2n&le:T^-t)rmqigkNiGao`e8-&O,L9jL8nn6!7F\8o)D^g6LgkeUt\)GO^#1r8EtQIps"D<pEb6
%6CU4!'>uVSYf@&d-hbm_&K`[7SBLm;%_PoXDgRFtr3WWAs0Ae7p-0h[m@T*>_56npIm*-1V&$9arni4S7lDOZ]9/YRQ-OY&NZtP?
%coA<o5lH(@\RCL@0*01"&OE,N"U_OZ5L(ir?d#o&5X!dd=5(b#`bqmFCr["kE\/pI.*+KYCV%[FqgkkTIF%UILD,QU.Ng\=G]F.)
%-&?SF8(JAB8RKLJ,DAUq-%1D*+8T<FI=9]R$$$(pe/:Bb)dNX23F8NK,0//UaW,3Tnmksp+Hi:O%*/oaSQ;D9L4hU=T6K+Ie&F^d
%Jf?t@X,+`?>;4[C5Z7>&b$1R$+[Dai`-NCiI1AQ*XBE"^p3\g`)u-S::sTYnUEQe,CpN@sAldRm?h"EnZCtC*P7Kc'0[#A;JGQBq
%-SIRpjiTWbm5Vo!Q^r/.7'g?>(OPLpWY).OnpY8_g+\Irl^a\uA3OUh;&is:h=fJ;kMpfWedqAd@t=p`+<L`N)[V)<GHhqc,\)'B
%[SFi-@7*d?cqrssLA!d(#(Y]`HgF8u0G(+*A2679FgNiGFAge9f8k&'E_b'*Q@7k8D'9)LYah1qKoUaOr-/n;";L#e<(YjJKs'+S
%ck:q-&1L*bAB2"4ZKVb("Y)>B$6K<0#T`6rHm_mTCIat*A]:@2=2)ZbOm+ba%OR;KZ0.QI67Z)u*k$"KI@Mkc$Ij*E-%X-[+H@FM
%="fC,>Uh-&'__@M-(B1s[/p$@"/C3hAo9#-9>TTp:&0hAFY,b$!C^DbSDsli;/@AK$3;Nu>BUQ+bR6cpP66Vg*Qj@Y5XZG+5*<a+
%oW0(,<7c1*(g*G+a-Nie*??[<^tOg)Sq(#HnI^O+!sBMjd=REBa(E4;9L)?(bN!Q-A[l$k.42&)a<:skW6!X!*Qq>Cf.irN'tFa7
%+<RQs'X>`NZA1dA]"rh,Gf5PRNPg^k&qYKdVjt>kV*0Oe,;3J.56><.Co6MH85<NPh[-M.djk!+ZVRltG%@8;CPA;/G#\Z7i7XL`
%FWB;[#n^K]Jnnau?6W<Wh%[p'N51LF8GCapXb;[FmufgLFdkXEaDulsli[G@;NMV=,!'\,^.tD%67;?WDBR(HcdU9r)k!9u@$rHk
%+&^Z*&f6eW'NPbXj=AaeL`-MHD29DOjW5uV2KW6ReT']L!(f'U+L>I,g0nf`-ef;uU[17e4>s4ZF`>('h4NA#\`$YqOKW40CM4YB
%Z\5)ih(.t1(rHuDn1DQ$S6Ek,m"'"A;Cj;eX0J>QK1)*[3-$OrZWAk%7?.jJ!]'>.4bYW$V]pL.$Sk.OkK/1RTFH:)I),h:pAuU&
%A[uC\XMhOYrTCu-+q?6qLUqNB.^G)M&(h[r.o9Kim"ibJJ]N$CEsP<i$fu^\Lk,[3'ZY`[o!]gdT^#@,$P8MZ8/;4Kr'h$LK_InX
%$V5qE6tHu+\uX7Z1nQH.e[.SO=/N33-grP:$HRE[J-\=!A!Q/<84A=3#b^Ke[K=9YFqd6R\dB&*!)TV[aXfW4e=pR9kE,UoL/8]]
%i'N.`BYpu69^heKRD9D]9)Hc*@^:%869&XG.Q,n08F7K\'#A8%Acq,o<,b0pEfMct0bUbR$*s-(;-]4hZG6K3:=eAF8'i3Kc77Qc
%LC#"g$5gsoD*gX(a$<ZjTs=h[bY%S#KS?!d%%E'b!rZQH$M#DbB-7img_,-*W9`u0EjfpL:'b\_<pr)BJN44f2Soo4?.uP699l[a
%"Q:5E4:R3l$:(:n;Cp^F6-;r=WuuF6OM6]GYd_";5bYFK"Q[G2%[>7,@YZR+'La/`OOW[;S6*/UK8i1:j"?,pf6IfU>I:Q':fN@L
%m/i[D!\oH6c4a*BIA,0udUuX;H`/UO=V6U,1pg\F^jHc)+=&@m\7Cs=N_q_Ne0hcKTt+WH_[saC$_)`c!SB<Kdoj"Vp9pghg/o,T
%S0MJm'UDV<(#[F>&nM5$l5JXKGbPlcV.%Oc@]m_)A.'P;+f74*C]X%.R"EEl\Ug1bll4'dn9A6$eM\/KYN>i/#90B>2M3j)"OMBj
%@S+K\CL7l&&e`n5k-o"P!Qjc_ZG&Os6\d`4M`mj;O&_onX2K;R$$,81aEc4r/SeEr1!CWQ$@ohP^pro[DNRP0:8$>ckM<$;%-UoM
%2I^>\Qq0LS.`?Ac!5W@.VM(YCBS0IK5q7^6&Et(#"bU<=*$&jVcDhX,8D-SZb-),J566iQ84T'&#IOOG>8C@4Nl?nQo;[l16m0d*
%m39U]J])j!1KeZ:o42>C2K#12XU@-]&cegu4tq'J6`6M6e9uAVFc*8&7fu%/X!O/f.E"?G&6tpM'`sX(,?2m!a/fB=9rh<f&be)=
%<-utq`?5;o0^uK8(FcM'cbADZ>(M7QFb'U<YsI/WS/KFGLd0I-Q6Q`%;mHsCIu`a1?4mX4[_7=N%/,pjI#E_A9MidV]MH!1qCL]2
%K2Vm%,pkrb<buPY\C\&@^g%+.\j.[8B#.."[Mu]k2/WG^0(O.1@1\lN@E<;:%H&Un4Pr`C!_[)Ef[)rdpsefdBJEYoIse#1d5-I+
%8+.l\/fUU>jh\6V8*?!./1_XH\6'fT7GC=3YD<R_170JPX4ej05`NKT8(>E8;7c+/'3D-C^7"3^.Yn?>+rh,`4;[l?8lcC331cg:
%eL\R<oT,/KJ6h,C?r$L*HGRHENnPIj8:MGma&<'e7TBhegCTB/U"F0#c8U,.c67d*[bkKr5tiUq]f+Qc,_0:P,^`CVE0uR=%1kZ@
%NoiFC[A,$\qAN:8nFd]7ObOqMYYRb@f$XDkOmO"g$aC<:`F/!dDLkWBHLbML`$(j3Z9,4+]E7@bF;8I+-9_c"I0PIO[#@l#E,SMW
%QBiEHZ4OI=%I$`J#oUiG)0HRO8p^[B?8pUoZBr5^]<p?YFpOOe@k?t<=\SuQ59(F2&AE\i.O.Ki"r'$HdtPd^b>#PPW[7R6\Per;
%TcND<Ta<BL%2m!L"S'?p%9t]k*'il&$Dhbe-ua#,q2e;R\WhLD&gu"+gER9XMiB#.>ln1c,*[\Hf!*daJK9J%5pJ6=@C=f4-LioB
%8!"^i_*l59qK5nW9P_XK8g_W'+RL^]>1)cY]Wm<W=GV.QS-3.(9bPAS(h8C7W.FeuK+O72@/+1'`^S7VVL_Ch^krd!'P;<#.7h,9
%;!gQS^G/=0XPdhUO7#I#nB<JiTc+h1/M)AGf/*mI2,Ou1W<I*.k=XN,_;Fd(Vs19V+p9nP_3\8X/-o'/Or2q#1.5"@OjS>JZ)7uu
%d<;p_OD1'fpEW3S8i!8_8,SS-UPJo2E@Z;,JVjsC/oWe3cs0;<Q8fUfX:Zo7Em%A0i5Ccf/mqbA)GP$)flUdP%u)+4-3SXN6%q88
%O:5a=kAk[$^7%'fAHBHIAW?Qi9%Gn2];9p#<<T$\&IO(")H0AHWq7j;VP(BVV1<l:S?f^STHPI(Ae^!%p+fFrO%b(c5rE\MKs2^9
%bg9kXko:+QO$H`iiSiO@s6K%UiU]#focX"f4lbbs5?gs-iP,]dER+WXRnCKcf:pi)@_2E&bSaU\;4*Y]*hsbHGNo\lViB2QOTB->
%i:"6P-Hta*^rC<0^b@,8aZ9,';X#\S0t(a+'C'9jf`2/mdLAu)>;sTGA=oD@N@@6ODUO6e?2kOP'6YWLE6U4*PY<^V0JZPC$6W:K
%;P"J^W*p:1#`*`TF"pA$=Cid&CjrZEBVS$Pru1_DNToXF#>[<PN4Qe]:&Q@gf6/uOL68PNEUb\nkJBF>Y.C#`28N3d9)flYp2[#>
%%kZ>(LZTdg);=6">aY3\/`PBV-INI`Onr;7*F\7*#\]i6T:V;uDN5%VRPg"&ntXjq,mkq)oAcpjVBO"t4Y_Q3+jZ$B[sqG`I+!`U
%70T>4%.:WOoQ#>!'Ph&W2),f)&?a3"!@)3lgI6?=o_ZZT2LGJ6>^6$U#7$l4iK;YTWaQn?W%Q!#A4G1K^F(5BpUF'Tnks3H#ATsR
%EaluT+YF=,L']:/_9u=NRYjQKX[Q+m`']Q#fruj3+!\(RiE=S,1eej<No^p>&Hj;E'"YOBEkiM85XJ43_ROJKab=tZ"O.EW<KSZ%
%:q/&8!j_n81N+tjJ0sV(_oI?)ZNt=kf)g[`DO#aj#k5rP)@!(>&?-QnS'&LiJe7Om,[s30"i[0SQ]:3HORs"#7po[GZ*hqZ0e=N=
%d7r8j@]2[%Fl<b(@79-JoL@c]Oi-#a,:bOL"L5)jOm")2N7=RO;8fqtN1o&=WM:pVdo?f0S&UWoWfAN<6[TM7cqr4'ULDf)`$g:6
%`#8mrA;+HbS1Y"Nln_`]+J7UB^BZ+(_;HTu\R8RlN_R/aA>Okt>#_`p^b015*L:`B5T,!cBXS52b06.RcmeT"1#O=>4ZFUYLe>ek
%Qo^7;*"B!nAQFL^gOPuuJ0;+GOsmB58eQP(@s\2ogSI.Hh^k1$Q:j[pa/ah;Z@RGcd+jFL`FlR4-EG&Md"GMS,Y&=EbI3D<jN)lZ
%85t,/jOS]c;m%@Lq`@[U%#8)U_mH(,dX\G<0M!%22oH#hPt&$5i+JH)QL2g<2PD9\`nTSH@QWg&Y)=g=:nk@-94Mb"#2tO/VQ-+S
%C,5G>+Fq.RFY8cQN>5taJQ\VC.9(Bu/]U8A\G;LZj*Uo:9PO]B7LDCtW^R&ogX^J[:$4Y$#d.nYJAg07=!PGc3+iB)Z"H=NIm&VV
%L[#O-hLR[RO1(YK.328MX'>WJBJbj>9OBq;@<-0$AUp_>:r=*2&Vu,;:*5.j=UZH]p\T:8Ygs*HN"CM=%*2k9eO403MXTS=\DB`O
%ajUNTLiX$f!Qs%A)C?R3m^Y=,n;p=N>8IgUUd-9Q_OQZM.OQ$1hdi1k0;?W$l-Qqj\=4\ZCkB;Z8V1\rO<&2]A1='G^;^RQR=_9o
%V\-uf&HF&8&KVl70N:k6"AjT[&ScRPZhgE?N*;P"gAit97ZaRJ5Z`P:!,WqsiP,rQ`Yu$+a:nGXKTTht4.7bOYa):eLlqKSE>r/(
%c>Fb?p#ufm1IU0acnGL2WaoB>?aMKW4^'Zs!jTMVrB<ml#3l;HXI.d],9@.KaAA`RTULrJNl$uj/<?ZdNSmuR_LO@'$6/P5KCTFg
%g?PPf/WfZ\nTN;kFbN:C@N_&nZ`)IWNNOsKi4G:JjVRK4!(pKS5T.FJaI"hB/9^N]MP[$4U,qQrH:A%Q25Pp+M.?uu&oSj@6&%HD
%Mg[Sqb$0d>`5+E<:maX3;'TL"R:8S)/5s23$_e#,hU3g,V%,OO@dq;s>T]A13!P&QJ3$IJq]/#`d>C4Z4@!d5FO_4rA_[o0.0(5'
%/.QV!]6efKIS(S>(!Rp.0<7_I+V6p[1Gjo,2ku(Ing;fqT,H`,LfX:-?Nn<fH!.`tG@-A:S6g40UIaX3%:]NA&5Ula"@10Y:qOp6
%!6"sE\q"PH'hHG2)]L"DPg2\h/4)9$`./N/N[dLJe7:%(UR'j)aJLJc\1"*"l7?:dMpdAB#e:`q$dLKr&jK>JdU_-\/S\[j6pQJs
%jV[(>eDY&/N124^>>t[+00hCO,dLFLP)4jBE?0jUO:#0jRH(#>9#CW1dfc0MG9u<.\n^2=453'IPK9"B0*S^6c"&Vt:d7uoBN'CM
%-63SXLA60kli>tBRKEbF*@j:rNeX@ba:pEQ)XM`KI`T>p_GNXb0`"M\`:Jos/+b;`6(fjI<2"(AiW(IJA.F/4e:Yi70)nTp0>nON
%bhfWX,B.+UIdn%*`b76i@$m61&J/GdR]_<X3+>O>j8]Qk%-rS@"E^D8J3pe[Z"AqWC"#+52AJ)=C_Q"HZA5Xhb1b=RIG7#de7!G(
%VQ6)p3a1USVCMa`VCNnS$AD$)(suUh..h@CPS4'0UqK1Oq!-0o[T]S&o-8NK&1]L9$3OS'1&%&]G#cqJ9FKqF6X'YqSlu7*cItg3
%,@)@FbU0W[c%'J8B_^3.U7mbiRd_kq$'Ge'>ZA4bB4X\p!Rn^P4log7N?`c,/2fgM2[IrKRYBoN+IaKZ35$U0--uFbTFNt96s.R:
%0Ra-/K,;u;i4qOq@OroRoV:30NP^.T"UNjO^cO<XPCo!!A1Lc[VpR!g`Nf]DGf4#7P^U\1jrtCn"rT3iNtaWIKFfVFE"o,QYt5Ws
%r6goDTZ8lUAAg!fGn`QL-J:(NdLj.Q##OL09nBM-f^at[!_!1^+"YF[M-3&:+L[^bZW)O*OGMp?PV-mF3&EH(8q\)Aa%?KUp,V&)
%)mKH(_<VHY--42bW!F6*Fk&<i4S>X1:eMH;OU&qfSWLHl&r^F^:jcQ"0#A!`>'%TqB4=VuYI`9S9n3H],*#@>c8ATB!b>gS8?gAO
%&=2@H7Os<]6U>*Be<eN+U#3\49X#i603i?2-ri7rh>mqM[Ln<3#"jiY\9uAeaAJ9C&@#"t%Md#<hbjF<OMINdNRi[R!`:rs_!"U5
%!3&/:FA\D.<eL(>i?"A#aK>80Ug-;B"%^V5&c*F\+QjHZgaZ+;TuUl?NPpT@&X3@N,-GBS3!@>Fjtg4GVP$Yo5qEU2Dj3B"nUrsr
%=W&UB9\U?[*$LFLooo;NedB2L.(*)h,<sDC?G/@4F:1rh@Hf4&N,"%K+I<mr\UF'PjHNDSegWLAWj^If.`ehrXKV+-7mcRl&ko9I
%s)6OSd*_M0@#2BV*@@GC1g!Uic'L@D1l[]$ifPrM!"Ccj'dt_t74g!`'L^u3##Nm"XqiL_>;;eH&7h=;ZMYDM=hBPSAb6TC2HY=!
%V']R^Aoq9V,m]drHV$LYeJN'h(hd88)59C>6Q@[c7Jb"[<?I7T6qFgi$mWZAA,4"4a?@r:$cqNW":hj#Bp]O<'dgK5@R=EQgp.bR
%;EdLm!gO^\)>/7i&;H,P8"1tkPg.RbPUQZ0`*ZfDC?g[E%kUfe$NG?E&6L:2#*>4bOb0+U<4,r;U18n7>0t3o8c7VlJ5oXJ0Jb7g
%3Q<eZ/U1O/b'JW-=<n8+4cJ;E3?H[*,&2XR!kJsD`E#kXL5K/?-H_b#JrGIm+k7%PN[fo_pE:GS0j$t71Qb=!Tdn&K6B=QtNX7_P
%<\:!#:9EPlq&7/E"80#`'"u%'$t3O'[%ZFsp!&.4WQ%9E*Do=1%_NGu$8<"*D?+Zqn><'/Up"FtGns'""VT^Mok4q:+GrY+ct%eQ
%`lKkXM?oWDKSb?H"kGN'Ck>)Kn./>l%Zj_Z70rME^&hgNeIZMj>Z2jL_h;%Q)NW=3d!gfdVSuYZ12,VRLq7B?VJ(eh*'@.((#fU*
%GDg'@kbN%AFbM/r$-$(IX"nis-EW`//FQ/H?gaYXe,aPR4Var8kn,LDVZ?Dt(1^knd'k&Lp%Tl#"AlkO#p-"2(uF`l;'eZS&lZ#(
%DZk6?Iq"h]4@4;$(56GL4,dMbBV*3[E&e+G-Y(1?/a/\2NnSf0"==LDP;&Y@LGBoV[2]7sl4=t%bZ$I5Frq;m!O+6f&910eqLBJG
%'o6LSiW-"!*Q*:9*&^0H!PSHY<Sqd5V1C.oE<1q:Ur&'LAqqr:J-9ggM@q\D'J#!*0O;E>a<<:(2'IT#[O*IHj'4W78A=mh:<'5Q
%<tHnOAMaUHN6a"bkilQTJcYH8&f5(+$nOH3]Y=PQ4&T(YIZ`?eQ51FC.o[N;ojLZ4ds&-WVdnlor`J&(=rt41Io"k`D%7Da@_J/=
%8J:paa.(WhaT`0;-%RKSV0HDuI&/P64%dK&%.>.?JT.0TYq!t8;MU(o5o<OT`.85fl^]91n1Idp<qoWpOf1]^rO>!0=u7I#o7jiP
%&bm5L'Vh=QHJ(6D2CN3JF6e?fGq?B=(WY$5TV)\p"<^VtKiWXBoNa5;0*9ZZB/F-C'B)?*-`H58FGUTFpIre6NmCA;;qEo#X1;^L
%]J9e2A;Z5hb2I,\9rkKm(jC6NG"N^dn"[9i<g6C35R>;45lsI*Jfqb,64bOc+O+I"AF!5163ARb/;E:\haeV-KLYSBLtOcCC[e'+
%d$KGIW%.:bdnhP=;!74u40`<jJO?P#-GDc6*7NMlGsi2Oap8=udoX^=!-7b0#,%Qbj&gE+mDP$(eW,HJh*e>/%^^#E7?H`e%t/4i
%;PQsFOPB`dV/1^;dA%u$RF>h2Hoska@uZ?g2duT$C3AhLNFO;?\Bd,D'N41,&CcHF"uG3cdjhT=38#%1J3g.PDSQie4#)1tg]?I@
%OVpn>A:IZ?N^D!i"eM3b6l(3>I#O<PI4")CD-O>i`sPgXBJY2k_O24Y>i&2kSJT@U?7rR/^1`3K;-@[;o[3_/6j]gK@:_@NG4^M1
%7Pjd=Cq+Se+:$;77W(Td*Aspi>X.mK-`=4n*kK@BF!a?uUuKA:,E]UNTLDVD8ScR5U7-Uh\VQ!%8aa-(&g7S%W-(<4W2[?f:?;fr
%)etI5A@C,WE[s&r'Ci`H6Kt3uFm5WF;=iJ'\b=s,VI%8p?*+E.PXh2%QnWK<4;Q)#foS2oU;F:^#jd`8I&%5Z"]=35VGIL@2VUJ7
%.s'NCbP2CL`$Q'mcqgisT3YB8KA.Z&JVKgrJ8E9UV;_RWYs\CE$!EXeVFHm5Lp!K^Bd+)k4O<8-X$DX]JKN8L31-M(O2B/gA-F20
%LG\79o`-iQW)jlW%DFPokY\H9pWfjJX=0MW^"3"?fMj*O78g[B&^u<fo/(Ou./='4"Hhn]Bg)bE\>f[/[/f:.RdM;_h?0IaEFbK<
%<s15j:5C]VpdnOURntisF#MjOfITgC;#<_E7Vq%Tk^>Dt@4FZ1*I'%`QNP^',)!jJ0cl&W6WH[i0f57#3BGH$)(]=c$F6eTb[<kW
%daco!MZC>;T^>^03(_[C+B:3-.\sq[h`%2<"Z.psg7dpB,Y2UGeS8I3A)O8d>obFN?,b'mg!8"!8-EXO0?Z,[$46:A2=40YgL^p+
%eP&"oCkd!UBOn7k$k::%qt"!RD%M9;b"_SPH,eCr!U3l^a&UI7*0;6iO]W,h0<%Y:A[nckVE[@UR(3R0@tuKq<f^)A1XW=R2iC?H
%Zt2R/"B3&H7C2,)4%\^;1qOft%Id)RP+)jnF'YJc%iWAqgIg@h(Rg!K+:Uh[bHe)f5liIc/aAV:J&b_\P>I#o9G(062REU*$oiPX
%'.PR(/CW.,/Q4]>jn2*;K?BcNHWiUM,_p8AaANee7KZJ'COr21J$:Ojb:b[r`'P'jglhDo,Lg`HgY?bE;k\=]g=MR;/<@a;Dl>JA
%SqhW-`R?#LW\\"#'Uah9>Q"b,Q3I682E:?15Dr6U1*cQtW2=.Y:;>?to=3!NU(Z4u-!f)i=Q[%HY6f!T#\#oi!<ou%!g"7RNe0[R
%)e7XR)t2o)%eKu9bme+ciLQ1f#lKi`'3OgI4)A0"oE$U%$&mQ[fo[mQBqsD]]ZKO:>54g,;E!/hm[(Z7*$H";'Hm7D!q$[]n7aV+
%%-N<ehq$_m<fA@!q`IZLQ!.@'R0uhJO0nhDOANK!:o:*9TV8FJ-Duq]MT'`1i](ioHaZSK[2_#9lIEbe<0<>l9jLsUW@HH82^&7R
%SqbA;*[`Y-0]0NN*F>iAI1^?^.4rG.JBFstb%3\*!DJaY&6KWUW$dYM/JgYsa$<d0MSW8E!sK=p#crtFMp%G*"lqe3l;:Ej,-P5l
%PT_MUjd=[Hed]7tir(Z`=;f']iFX':(r;IdPSE]9#$k%2%gQ1&;-u_.Mt^LDPo]fQ:bBPCe='sVBTP$hRLgPl.<Ph@SPIJ[T),u`
%mH=%2j=\RSR2b-t1Q</^oFj4lUClZQbE?U>3n.0(#mt@',=ZMh"Wgo;!Pp$)OpE-(VNG3HED>@1/F1*lA;hINY/f7I85jW?-)>JF
%!!M<hON7X\]9Gs^\Z$9V3QirnE)ukc%?q#H/ml%PfF0Yu9Dr+k<fgh.Zjrg<Z``?_6`(.[.#GOF$K?D9(kmntDO(Q-kesb!$99b3
%cFOSG2X1U28g(uq]HVIp@<eA#AmlaRY0gnTXKW[mpq`,9iQef5[%itr_[,AF/1i['(9\1P8.4U6l?*MK-T)T/&$rhZ2i2o_pa?Cc
%8)#gK1j4"9_%>B05*4][,8Fst#M_f7fZ!Fk\1:&KL.3OU%$^kSkQ7TYYP"Eu4%oSi=_O+]f+lH0-fa"pY!!r)Q/'].c)&l7RAN8\
%oh9<r8*bVT#aBYk,_('6$rnaXIDXe\?5&rb;!&u+K/=*lE`+g:/1@^p6\b0o7pYS,;LYnKct+7W18/CbDO;AObo$p'*)^HB7NDP8
%'4s.gVZ:1SOTqMhOB#onYnE2H3L=AgW._?)q6;Q:?6KM?SMS;QI3lbbl3u>kGZUs'))Q@J8"8,3bBeM-FW;#(o[W5QO%IZUR0f4L
%(7Q7`%,f$)`Q`A8m)5j,+!oN0[=/Pe`^jj6"ffauZf^is][KGf'@dJ<1<\(3/bJs'.&sRB]iZoj]r.oh9r62fHsjY#$#>3#^[#Qm
%":M88f]/9C1+)Y#PaI_*E>\"DTkeP3@UUTtigIFI_uO3j*0snjB9eXV'a$)2PS(Z3=^gk+Qnr]+ng:?oi[P&**iOUe.0Vd&aFtPI
%#3J[$n_8gQXD?4Bmq[pa=(32`OmDfof0Kn$U`7r9+W2e@eSn[[e7h1<Q"ONub_6C.I/tL3ouM*c>[Laq`VI=)^,*5&;1%An-+]CC
%;_bi!W%cm^8gkuB7\)moa>+l-"E9bRckd8?atpC0j3M<I)<hd`k;"[tmWA=Df-J,qRrVf;g^Wmm&ojs]PKEqE0W,ib-8-,<VSEjh
%U%O:$$l=YrnEL)".3+A/r"\ZrH*4?.M,Ao2?<[`oj,bW+5NCFSJG=u<>2N<P6$5W;OD#s[f:?"WVLN;7"gpguSdPj]QgO(U:nbQ6
%X$P9ljkD8npitM,]j&e[A7"IMP-Zd@Qf.]]',Z)W).$4+r<n`-6V\O2L3CI"a[@8V5'&!5o(`m?1)(tlfa^8VD@CnV0Oe_`M\*`U
%!iBH5B?M$>O`CmBH4bZM(`C0qKqf.YYEEZcTCpA-nn%mQ`S_OT9NDJ<AHf:Gn_gA_*^Z@6p&^?-^`cO"<?2Y-!W[/f49d'!#ct*H
%(<*.R$mQ`=R76@sl\L?^KI.s0#jV]AYqLoPq(EG9bt::M8?@st1f*BC!7;An:EaOc`>eQ_`U44=$LK8f`$I8V47[WX^5JMWUWXH%
%!/(Li3be^%^_@>iCh@#SnSP,hcoaZcTNIbr/euHIX<''^mKEr;%6H<*RK.aq_]^)$@c[rg)M0kU&CrR'1")_AWc(iJL_?i:3->Qo
%;$4,L.-B!P*5-5)inC6r-8UO*%JfccC_hcSj-r0F_'[Mj8Dp2_20aJ0YBU@%TK.]s5;FY.eaY3o5Zlp(NikDigj6[A"2fc&%VJ6T
%6&n*)>5%S<0KR),[1u0.7G=44M,]*jNMuSWV(BYb>:;8QSLE#mm$I&R*gICKMn(b%G"^.QkMrrTEh\I\i#O(hL#d>9-t&tg"d'QA
%Tc76H>)#ik0JjnVpbmXA)>q?"Z)f0;k;Wd\83oTFjcHFO5imMkkA!;E!$%kr!:doSiBpob&Kn%+#D%,Y8\'\N"#h)'SiQ<M1[1Z1
%/kR)P4;u@OGn&Fq+Tmr^+M>hU67.A?\BQ71!lVK%3G2=:Wjr<+DQ&j;"U*h`+0IH#AAf*q&MSU$L>*j-)[fDLV6N)#jXZ`gd%F&M
%V&V*m;j\/j-<C<m]SZ].aD8V.&gWg":gOse=:.$mT>Ol4&Qa\L0hF]l\O@b(QFtK[\c&d<]g[VV&&(Zpiat@G'.Q?dj)]4d!go]l
%'$kWE-QaKl;`I7&%0Hnc:L8YSKN9fg7`k0'Q=_CNW?CN1&-uder[8YSQiG2:!bt1@5is%0ksI3LepnPB+k?Co'd-AT9F*AU_?%,9
%E:jWC22D]pM)Sc9[EUo1k+*kjCmV.Xn5O&Z#-b#%FhV1]#=O8$DDCFI,P6od?phVu*Lh((Sn\\72)_r*8.L$ATZl>l-C@%Ue0VA2
%U&](ESjd3ZZ=iCI>X%0]Ba@mn9)4VVWg$N2JO(Di;>q4h#%5#rHCpTZ>&6%n@ag281Y1[bAi_8+o^J8Wl`VI@\VdT6jO:GcpuH(P
%]u0TlITA^."JpYn'TAh_<TrX@)8-:elQ-3*E+p#R]HU`!*ZrALe[,N>3O5?WYI6U#TsRpEA&Qb'Q,T,E^p@cVA0<F9JVBhM4*a/i
%b_qJsMo#L*X["`$\kjsk51F*[dkT0q!>Zrn8[3m=d`=igkW<eB!0n"E3e4e<IFJ?Q#B^JXW#qC-]NWTqC=eOcAW`RXc^UgP%*gkN
%mEjdaeM##8JJ;C'TOE1I'V9',+B1]1.`_$[W,KU>.JWNQnT^^h^si`kmWc$=r/D\3+_a8o\.N^KUr(3\,T;MD&:E5r`rhWf/<-hG
%6?e\]9LZ"apLGBXiPtK)E$#1YmpU^,Kk=F<!ho$24dq.f<7qKdKa;?)O5/`G,G,neRbU5C/uksspGJfPT^*H'#`segQ]WIl%Eq\'
%;.@(&=h%3^UR".F(lD>/KirNf6^+ne@1e3u6C9l6*(B<W$B-OD9=0-K$B(lq-o8Si"Gj6?5[^XGUlj#/Nett[9nC54,^Ge&1(]oQ
%L4L?q;"\V_\Wq:=p!lM3I1QWO3a\5.1?ZnX'UGum$'6;%'(Nm1B3G=X95-.XnmbKAR__g\=pe)9L?`8C2lTAWPK<m_T5sc*@17[@
%rF)$pEKi/TQBfj75_'T8N%r=(<K_l7;;radkDf8rU`*SG/pLW%i#._>@<9Uh>MN;<7M4-j?J<S3PCVtDI2iG72k7'O,3RmhW`=t+
%TK-0LmibeA"!:T3)$4eW2+5Oo\";^TC\M7=iHYG),&\hGJo:@JP%X=-43Sq9O0eu(@!CUI@$^n)FouUb`?HFPn;0V,?m*H-ZVAZ1
%K-Q$SQD>a^"jm*U/Y?f$9\;m+KXHq&iSo+p4c&`Y$fDhr!W`<.`hEL=2$<o!_T-:O^0i;2$p[n*Gr4$&jFpB5lF-*fJ?Ea*F1-sh
%TGG[;6!fXEG&2OH^:@M2]/'6*'@)ig@L$kg.5g'^UUVO*f/&BsVDfY8H)K)D`?=f0EkX_;d0t\lV"RuN2rp7,+b_-66N@EYC?S6H
%GGkUSI8;rQjo5-=E3s-;G*L;i0LSAV2",(/?)V&fC8f`WIM(_%q7:6UVN+Y`,8T\2Y1WT*)"K4m@E"7Q63p>mC]bWlnqSum!mupe
%fI*,An51AonQ$3D7:sh#:1uu/#`lL\BVAa2Fu)Tg3`5qds-S@Gj+8V])\Qg'YDNL7J/HlTqE6$U:W03$C8tV!&:66t&G1P&MH.WU
%nRh$.!#O\\Kj%-M#eH=77UniE4$tTXnPR?Hh+J_t\oYHZJX$62)DhDo1W#"^aak`WY;FVN/b<A(!'DK6E-is-.R4!-XCd$lD;;nA
%;jU=2JrnZ2)F:;l'rTKu#Zq/QlIO$9Kjh&\!C54eBLi5JnuUSI90"n+@0!+NEKG3=6]W]sLKS(O=`sjCkZESP6hjop`L:KcVsR%J
%+eX3rS)h]h*^Eo$_oNC@ZiGe'%gJ]R']MFl.75Ed)F0<d%&gc0=dOa<Q>=?0<3W7'^=3E:b;qNBDq;sr*$JbM)(5+sTn_Q(05*@^
%.!0=79!9sY>"`?nWV`&`;VfT77dM&'R3WM(N`Kn>8L,iF:P>*P-M&(2`)7LDXXDOc?kWq&]TPl*$dAbdI/V5`BH?dT/o`itE^S:\
%dJ#=$a[EBt2\_&0a[Cs@#^979"g_2]F)qmEjc^@BhL.#9q(`"ZEc>Q$Xg3Hqi-"f3F^FpRK7o207EVA*nc@BFLX]A'OG*MN(pK$q
%[I=6n##pjSfn"71Drq9+0hS->IlIOC$H8R9_T_UaE2K#mpNTshVP?^c:C*^#g/6=)fG6rM8GRgfn-rA_9[G<X^ZL0/<brsgFS[`+
%mhfJ"Vh%XNL?8VA6E_EkP`4#K,8W`!ehIMhn)8gl9d%h(a995Pi@B2aW!8=-6]4R<TItPqZq@#(!nD+lCD-PE5N]n/4.+.o\dB)-
%NJn<:Qc/OVRsb8lcEPSop^[7A4F7GT,NeHd."F2,@$;us9rnJ7gH>)O=:lMkT^D'8^=Fg>*[ie0C@""g8XQFbS/,I'_F-5g5b?<K
%BFu1+NpS2MqR#UWs,4Ea]f3m6'CO5c[Q`G<#g5T[5!'IZ8La`q2bu*W3O5[qpXog^Fbg[)%r#[lbX;#hn%G,YHuB$I)I"P_79!8=
%Bpo-$X]SQ%Q7Z6q<R\@6Q(e^e9/'X/[2b&1gG,:iOjA36SO+%4Pi`%i-b&"Nd\>kU"ZnUbr[84@;/#l(mZeAcqEbpj:kSi=oc<`o
%*ALG'RL7%'U#)iE:5Au3<9c>^kQKd#+NA.&E[glnd@$@8ThaUIo9T\19`ki>`N%<FK8p`5DfM/INhoLAAX;JG?iba0!R'*P116'W
%lD)HnBKDqQKsGLN/S8B$Q[ZF\Nk2Yo^;%(Y\RW]W#Lp@[McaI0/gCVN\;ArYi\=X1":&^%dF0UK<7X?C*7pRC/s_\h2IK*[jq/dF
%@3Z6Y"Bmh/P7JZ9U/)(,4YXI:1cUF0&\EfND.K4YJ@+@E8GJ4(e]#X?oH;B=_?<KmJk-=P#eYgqPF>cDX["BG=X+.WmoHcTT1Zmn
%*lBXHf-j[>@;/^Un)e?V"/$4o+e]J'$d>u*g5g[@)oQ>$=Ji0Wf+_=thQ[8UlP>&,SX:CZ\Q01_@jqQN=XSapTI`COKt+LR=?;7Q
%#"BRd'r.ODQ]Vft2%\%O)WhQ)!(WBM1=(Ye([HYna2fBl-H%AG5`'j)P'sa<,NF5eiOp..Y1BQAk(SO<'<,WQf];`$)[3L<%`?X?
%-r3#8[GjoWW-JF'P]*ikjLVRe0ojM3oS$EjBqiIV5>W8WJpC.kajEcL.!*nq>/H$C;ClU'V)k520%)V7:"8:F]t'O!"X;iA+KfL+
%H?u-I'TA\K?hk*ffFmNKBBEfkc!u_<Z0*5dR7J)mn*rF_5`@GOG\l9UF(28h@,EXU0[^u^o3ba3S*J."4kiZrHKKK?P=-X[0jm1,
%BIEGq?VoeCKWujoCji_Go[WLn5XR`e!g">(cm6+A7?AT0>.'@58uS4EGr8B)5ZI;pbkiShSS)-2;Shu7NBVNn#XG"K<HH#Us%'W7
%2`VtoPA%BshaUFWii?o?,smep;I6X2I1Mac$*PYD'+tBn<2c*bTfB@HEJ41?Rr@`[\P+h*kb=)*%4k/%[>_<?g5\`.gX(3g14Aa6
%+I4C?[7&RK+CdUY6)s%-,,n;_Jhl(P`"8tPNN$fj$nJUK&1M*pYL[gBZR*&?1*f/Z'*Lm.^(dW>GN>-G`qMBpE=rs'n'^ccrs,4=
%g\U32Z<Z(D'9JtPq3ZhL'RC(g-BXs]GK<L8*QqQZ>-!0'fJ#3$Cq</K/U?8/X*'<2-C`Pg^558I+V(#ckXEMOl>&[LVe6t;b^rR2
%2``O3NfI.:=S[E'P-mR=M5N@N25iii1sL4?ok)Dei2o6YP0a2Za_F^P]WUW,`oNuh#Z,'U1XlS9UE%lJ7nCPM24$O)_]H=bU#)<Y
%`UP?2K.Tn@leu!G99?$/=?<XrR4*@'&-_cT%ZI/+hh(uRI6c%OIas1$5t4n,#g0IZ$5:<?njC`R'Re"50gL;$=Glam3e'5"*f"nU
%f&7mIa>6%EK9ohKbBVjUjPdW27N:YO**c.US#ol@(Ge^S*0-tGF8disG[+9[>\TMgnWh$H$+nTIB3-UG['=oA#o$eN!+Juf9os7W
%2a)TJg/&HTb#6r*+YJG,*VSMIPSA[4nu9GmgR,Q1I\4J55+L^R(#nk,rN'`9#:/_?P`ekGepJ#I"SsaQ;Bg#T+n!?/.YFN*_K1,i
%@9K@R?udF]VUs!XKs:EBGMhmOE>iqBbsVCer)ZsNe@9br`/d"o9r/j8OM7EMY/oO45ng_c[&Sa:L+33,(LWUCA0MkAL9hP'`/2b,
%kqdSb1$+D)K&rBI1^+NtK+_9'2ka_jLnSH4TWg*9Gl%tH[ufob:P5;+M%"uQU6`H7$;_:[-3WJaHL&FGEeV-g-#[a,8WZuj#Ab3V
%Oi7\U<a`(Ld$9L:LL]XE;\PY+ol-YPLa$F@o`T[VXnDUFRR#8liH8IU`VG9thp:G[iJub7;TIF[%H$DOld>V;%>dY,N["(T00rdB
%bIS<r-k[FFAmCr>NSa?PI7`W[9ch+r$q%Y1mJd-ohPF5I/'/9k(Y!r]Uqe$"HbUZj;44SA#(\ok\7R(MPNi4MWl[leptttOfD_pN
%Jg?IFhmqp?IJ+mp`JPC/N`LA;/fr!ZI$\?_F5dtIU<_E_4mMnbQp!-[s8L7rBU76/,PR^2Lr8i%\\%os![p#>PLgR)0Jt8unCTCr
%`hed#<<O2U_Yc6gaZ\<PDdAc,R`"n]kS?cLrgNN.i_RU'8%@:)B+A^t5)P=;T9O/Uj=dOo3Vb5W,M<l?CVM*u3`%lo-^hJFM45%)
%AZds:YGjtBV:*Pu-1fa<mZGI_eF+Toe9k"hbG;mP8JeHg`!F-HAPn*;Sbh?DIc,#K&WFspK]7;F;$d>6o5d7-Rcf7=C95HM9/q*=
%%g;$EO;)8r4]el02I9@b,'r0iUkfSR+Hj\`S)V;^4r2$2DM"^^+u<DJcBS/72Uo9qBGj5V17\r)0(!PNTY9QEm,mAE;,>.9c''-r
%nK]?A*$CHj`+rMD8CVVkA1?(<+Qh=k!P=:s?mY/)'A?RrMBn!SP(%%u_"rua1W@@ZIFhE$^BR2jH59"%[\J4ShKHnB+7@pB%m6_*
%3I#SN!+^7k()RJ/m\[9;Js;^f)-cl8HZQ$AcM\lLA%-b)6:e;-")o=-]FpVLDULBaGD(^/*LW`g9P)6.A+!<:6$+R_0*]+W@f4Tq
%2De#V/8n*]M3[np:t-2][h.OS\LA0[/#\HE*8@@@*?S.".>qk`!sD,U5Nn,a\CdWGWJ:?98^1_@c>FUkbmCYHB6B/,l/Gm@W@r9s
%:0ViT@5LP.U'c@15oBX07JTJCfB$4.W/%bD80_^hX:[bmCr-VS3kgp+mep"W5Fie]DG7rUBMl0g&<^JGW1>L:qbDr(SqKbCQjFp&
%"Pr$Wjm<Bb)Z:Z\cJIMS33.#h;_jJ[&9/a2)0:-e^DCKCr-KWZ-jDNT>_R4FAE;Mh[]_hXLoVH)n^$%OYA5MZI.6++li$/(3[UW$
%F<`)RX'o1I3Y\1sGpnMb&E#7V.bXlU3Xn<p$j[jghs[ITbFr7t:PV21H_qBRh!=P%D;F&59W`Q^fC!XI4ihqD5nun=X]SU#n2h30
%?XZV>O3k_`(8+]HL1o>4-BsT(aHkptfN/a!`m/NuRP,$\6OY0V#p4\L&p=$-jnFcRG)Am`GSpd$g7QmdC.(1HZs7.$W6auNhiqZi
%Q"]>s5IIO9L;a:44.^'uDH$h3FW@s),n.?Qid?k44QmifA=p7N3j]p"6OqV#QVOS!E@[rZJi4ku5CuA@G,7>j\Vb?d*uUKEA,h&r
%5O,LAJkLQaAWo3BG/FTai,$S<.YgWeLuQJ0k["]sWQSpHGJ+8M<VBF=F6_]O8@f#e&3Po+%WCQk`>)d'q:TmR'23/6W&tt`/XW]r
%Y:__4Y'p4_<[,r@S]p3)TLGG5r3YP>fj,f0#Q7mlE]q^k$.$D6#tmdgnr7X:%Fm%88Z[C^ID.AV6Boi'Aufl(@t^A4Pft:0etN/G
%m[bk-;>s/P#/b0%]_O)D@k]Ll;!hUP.u4SNeBClO6<&3sFQXi/K@%Q7HpR#Z7o>o[kf$<6[(Md?LHBN.Dr/&.rafQp,>]6iaPitc
%?kD^j;&g1m#qcX3^;mBaX/9IuM-!N0P5#Bj():5q*$"clD)a4lkO-r#G9m[&QKOiYPBnOjaJi7!)T>5f8.JDQfk\:`/nXY74buVu
%CQk+qP8Z53/oA)[[c8-%)?b7O.I8TA,R-J92')!a5S(HL3m#N&m=`Ah!j4\&>!;cM0RcON_rX7@^*_"OC=r5h34/>:+PhJO8Xk!1
%^tifPfTnTaPL?rIBl3)BR1,Jg5*j&5NKTk740\"rTqs>"eWRKdUq3(6j\d]n@jjjUZtRc:rc=kH@\<H'g941egh]i]:+jrmYe*K$
%""*;];6Kk<"L`M+DiAj&p/VJDGL4$.@).$jPFXTg347*YMpW8q@LtM7qiG'F&p2'hH<O_G%`eCe*edc[bltE_VBm%!Rt2!3_CMJ`
%"1h;Ek>>=fg7r"oD]+,kA#2$^LkK^h5GfI:$AKs&:4k)(#4^cS*qkd3><hgE_1uUiV4V^#0dqb1H^Y1IVNg07HKlVL&:nOebL&#K
%"g'=NPTKPebWV#d[+qBa0pI^J%WTD#/MkAQb?D)%Iue3>Q&/5$l7XMkP_n[0a[2FklgN8:AqBT:0p]h33ZSV9(`ANG6QprE.4.23
%%KIXL.T9m6WQ9_LDEmW"M@9Qe.tYk/+9(m_PX-K$W(ENLIR_)u.kjs4:^-T4<7UH**N(Rh[HSCD/$5LBfm>IsM_8;Cqc'Bcc.e8L
%A$+gbSB:'sr+2s_=0'pmh#ae^-Kk0/8abAX4e/^e;%Q0_Ela+[!)KTeh"RtBO#'`,8(nAalc>9/)q2Iib;,=TA25k?C`bQm7uruU
%JrRPl[#?_TjaMP\OH#MuE$I)^Mq2W,7r]=Afa-#bI(K8M2)4:'NA=\"QU*(s-4Mes$m3qBI[3o;mmsPq(EH-7lgZN9Qh3m!`u4sH
%)OZ10ZG#2aFsrSl]:QJG19SM=hn#ol0??,B^kZE>lZX[M!j,sa!Pc4`+o+cp;5N)&*4:Q1),<s[PtLsL#k51m3RAY1cB+eSL-NH:
%A<@--Zh[F$Jk<hRN6/$V";RNgr;Ld]$,*%;4ZnB<Gb@'Um)ibrfK8tV,aM*jWEl@e(gmSr(9.t'mY:rS#G4mh]D;n"'db=aX^tn8
%pT$[nbPaD[-u[ASbu($?&VfXfH-U/9:>_k=/-elor4.Teb]dV<]kV54K#]<uV*rd2Refl,iqomDjJfe^Xrk[4m;=/#!LTQ"5=,GT
%\BaRS[FI//K;&MS4pUm9]Bemt5hEA&3Q..uo8,%8)4<!i/sR.@hKR9t?shd`ndJ&MZV#"i:<?$:+_&'R:aKg/d@f3AE;<3l$Q`Me
%T,A\k2^f1J3N?5\CsK\`\eLb=I<KMVMMqZO,_U-7i*%:Z%g`jM(ge\rFN+Q$mRAFM'\Yb7%B1M)p`W/4)&oO%P`D_"hO4PJlZZqa
%OUcoF6[-^;,>5Rqe$X>21nMl!S7[3tY">fMX3_!PHC3?P5c6,U3I$#07Y-Qj^a\76@ptFO]&fc:X2'".$7Rj]`)-332i=5W"Z3I.
%2DlQ=9kDYL(.M$='Y9s5<=dAUf8FOgABsD[YZ>o2l]:-s-nO&h=Urml04S3p&LKD*(@c0%eM+FYe\Fd4085oRm+W6p&:@N7R)T/A
%5+X-1E<])Y#?U]>Z!8B!cZc'><p??1e3oKMnEIAiV8>'LSN?nd\[M<X$q9t/b4`*K#qj^e?K?4h]Keq#+^!P'Q]1B4Vn"kjjJ]n8
%c1"jJc%D8+#h+ac64T,m)p'r.[Au9/fqsSBpuP0diT'jpJ=A,pQ$R(!p)Rg#Cels0([OoRk2Gdq.Kd1j7L:Z>Dma5f?+IjK/\)Or
%/uAZi8uXNTQsAB@nE-q!GNW.PqS;*'71<g7&%>R_0"Onqb2H;_R><Y5>:9UV%`5TEbm2Y??`QB#O#EN#ZRSk$67pL*IKiYk+Gr(O
%BZ!`No?MOq,0Gi'd>:(GL6JgZ,'__rD#.Bu?22>n"[B4':09?nVCRVtUQo7C?P&>WMY9'qC\luMm,=;]nVUtkT/F+%m<<sp-DP'p
%]UEr)c\"3\hTHQm8\aj%h;bC/"a`J[f5X/$6:[XfrtE9`ifb]O`Lj_#IutdaFo**Q9A\oG:&5<%ACQQ01M`n]O#`=o%[bQE!XlZL
%]r?ed]l4u7(O2+pf\et[Di7F-9i&qP)QuIEE@<N6SNR)Y@aI@[+@s#&O,dM;RT[mE=kK)kqo<6P*4<X(_;%fc@.e2aA":<Wh4cf2
%bmu6=:/c.13VAuVe<tIXB3LHN-4PSdQ*5hV$muDlJ]tQ-f"?e'hL8f:7ibpm=LPQ9*aso(EseG:rgmrEoV6(WLYjU-Q(j?(8MLnR
%#U(0'I[:R$L8L^;OQgg<ZO=g![7is`9l=k&.?L0s@u$&a/=$%Qi!d9n[WD]%#$eO=g^Z/I3p#Ijo?gI0K"tn8>pRm]_97d28Y$P"
%Y?(0:WnXlLMM=uha%SH8G0qgYQg,eQX%OF5jq`C4Cl)4bnJL@lS9sKI%;Kp0e@CMZY+ISp:8;W&HBM*(WXC"]1N*-6_2PC#1YR1!
%^Wp@Vbpm50".5ke`A6b<Z2:s*'L7fs@qQ!Y;eZ=Y3dXKlku(A@HYrXKbfIZNDgj+eIIn)9O<rWcYTT4E:X7/']o96Q3`h0_n_:V`
%s#d+j7:sLe$rmoWkG`%nrke=rq6^=d=:M11Pk360&>SrWXja(pmOPMhW;i3t26eInph&(>W7e,gmR<6eWOM@.%aQrp3&:D`CXHWA
%8RB:B@5fhT2:Sd/j>''OghW`X:`g#U<'B6+d-0M&6iS:!'/5h$^+=q"0l?UPA?C-<AsSW]AW(.?BO"W"GA-h.COV@%1b?.6)Bb5c
%U;3e>hEiLnP:XbJpZsO0U:&k-LQLYLrI1X#6JPYt5dg-\l(+H!_7h9C/Z0'_2(<+M57)@,FHa'Bb(d%o6Es_+Q:9N=4JRS^D"eHj
%WMl6pKc'3`kG\J79/3A'O0_^\&^#,EV<_Iq(oI7O6*HI)/9IK[Y-(IR<M]d[cBZ=9+-2p$S7F+SG;F25c@'LAf(n''r9Gb_bpqnb
%WWb,o?Y$j=E%!&!+U6\`\!3EHgFV8;H*Bg.=Q9qCjZkF9:tK/DNV^Pn6XdlS]D(]F#;)/]:Y2Y/^BE#RQLA2_XKp65d/*`5`N9m6
%bc'aWod$qA=ACmXVB:NQ,kGG$!_#BFJfrf5W,&Zqqt0Il?,@5&@QHZ:'Par9D(.mWPLOG0!$&Q``>_pVG=<9s05IRYQ5,ZOB@Vq]
%YZ[1tBh>NZN"[>$]X.Kj_M`SW4["Qm%8akm)m[]G\5^!u<hBp;$'Tt>i<R*c'ugKtV$,h_@mI]d-[dfZSrc[F`pju3mAQX^-B1@M
%3AtNtqka@(VpZ;q:mKgT^oeTI2A_dc7udAs81`\#JMhPbAr8E5GMc1$#Fp\;:;pt'_skg6D<uJX;t-Qa'%Kc6ANYoW2.gHEOSm-l
%5KKVQ"`2;";tI9D[p_gbPGW-c7p)na!\2FEn'$PrZ%RJ#3`/\T,]?ns<)lc8.ABE@aSD@NWbV^9\nQ@0f`@dL6[ZAk'!12;HZcF0
%p.-68b=j+"a3"j?NU9i-i+f)2:,CqhV84i3<GcarMK9EsE)sN!;>aPoHj"698E1%.iRp#o`\]J,!C)J;Si'm>H'N]6kO+Spb];mD
%h<W65E@R1V4dDa7f=C`h(=kS\2l:U!O<jSu,m!DV\kHa&>DJsthJH'or?&0ZKh!`(p]n80QS3,(DW\6V/kfX0:Yj#^b561?,+?Dl
%=dW_rS"4<YbI&*>Odj\*jG\m!o\,YH)q;6_+b[7s4;oP50sD3[?l[%X'UYU:_f12_&[6_$?j\8,KY_FaoS=mA5#+o%14J%I9j%3o
%)4hH/_<V_aV.k(3e9*91)S*>m.UL$ZWcR;N;ttpQD>HTbl-8bof]3IuN>7M%$^[-&l$;fAojVb#2dZZ2<Vqrjfp5*"a=GB+N)/qs
%MFB`NmhHJB]pP&Q5s>n#6?lE(]g4M8VB/X@QBRQCBS(>be5*BMc%6"E`%h]/X2Op.7&/Rb1OMs*6pAh;:KaFRgGd]LL<:<\N+6Q;
%.Pi>`4j)61H,@OOSfKtQhEDhIDmqI^&t7ruc)4YQNWFf[@/<D%YgaU=<e8`<c,1cE;A?3KJ.5fZk1^sNW?4D6$)nl.6T6Sq2S)X\
%Wc!T__K?<G_adY;m5^>Yn=s+\;_DZ='@QsfNp%r^?c\@ffBE^$]AM"HAE79U5$:P,+):[XS+J-kJapHs,alOa(*;/i5rYk7luq^E
%1eP[d`1P[7_nnU1Jt)/C3T"IQ7ESHMIRrr^L,;]s5WC=tEFG0<S[eSA\1H1$S"tW>+8`N"jnJB`'_.u)8%uc=!c1"/4lkKlL0S?<
%3``k_]M@R\1nnXSob#E6I=>S0qAogN[U.=nhGZW)BhJ=7+59K$?u4,+L>c,_JmN.A<61:3Tr6VEV@9aR%enrZ,3`sf%f/a/Ip`'6
%\-/7oQcgJB7-i=Remcfs#W\5UH#Of22r^-9$tnF27K%N`QpBmQ?Rn,a,,NM!BELoISQ06Gs)-"R[0/N0XdQ1%pe0E):9o@[[;h/o
%ot9/m9faaXPEcU1E1iXD/A\Re;&>"#Bh&nd(=&r_iuWSB*KN_,3ARLp@fi0lV9>gtP`gEjcJu@Z_?9tk+d7;6(gL?!oo_fPO<;s)
%`%Rd0gSV/7mjZ(mpt7s^:'nK;=K@4^%`k5:3V9H*ZkrL_jK=AIPlm57];Tm`V@lmBAPt3iSL@i\p9%BNHu05lKc']5KQVeg_\6d-
%GJ.N"KL-'I8$I'(8r<9\+Uh5lb&;'5->>k85E%qgG0SLAOp[P``M>?3D.O+5W75`7R^*dorFVi"]`]/lb#I(m']TuIX[^4^aJ2l$
%qK'jCJV0Bpd30Ol->Z\=.j;U%dHo1CmF&f;5*FVp[N-ALbP;X'braR-2;=Q<<c(pBMi\YC$2EnJeY_fOG-XJ^1@*l`IVfu?d$a,o
%PaXZ6nQbfp4tX#?cTI.@5]=aLdb2J<IX9FCliceL$+$S#hF(_.qDhCOKdOrp^pH06s62">?[ESV28DXK].%ef0EF-@iI9jD2CHhP
%g@0>=66Y%3/t.3gCa#NN\U&OQ:IRphD?dA$OTk:->.#5BQZ6'o&AsjKEbi,DjLW.u;M*l?RdM%[!DMj7h<>fe:l1$I64r^,=jT]U
%?16Jf(I03Eomod\QkIU)TKL!jl0!grhdY<cA(<0o!;rR]hh]5s<.^*tT+PNg\uU\J0M+'I'qrSF3+!UXd4_r;i07'L#<RM5\2H8r
%LUQOYB8-`[+"Z6)e\c-TD/g@ma&Fb?W3cL\9f]Q)=qc4)/G%_%cjQjM<@W>p@h;KUYLGrMK#*fkfCg.OW$1!83s7F8#J^QsU1;>!
%J\-s3hqUhCX7QlK2!n'^0[BX'%K'(f\$G(kI0\00E/J#q#rA(m]emgg:oK&h:l2"embnl2HA/G9M"=;p?B6HOYPe656hW$o+tR$c
%I+h0a81P?]8a%"V#0I&J?uJE)eU,k=lTYI)K`;RP&Pe`^RoA9Rf9e8Lb%hS+cUck)en9ckBl?gFdQ-7q!]PL.cG4CjqbR/+/Urj)
%Kh:BNQkI[@,Se$tGR"Ar=A7VbFc(]CTr8oNB[5dN4Zjf79riD2DpNZnb*'s89L?3`1VZ>9%L8tMr*CiV7s5sZ-J.?@(!)m7LFop&
%lVSK[A%>d?Y$/P+)e+^qiCF;;kEB,4lTn-Tb#dYs'%TWHFN&[&251k&@3CbF<0^@Yl=Wn`DTh4Z*^5d2U]X=ii$-KWQu#=@^USO^
%GZ>*0#7c_gJI4KH2krtr8+=,o@M(t#"udTEKjG*Km^60[Q%juPlt>G+5qik<d+/(3W:]$)>5ZG,)knV[K&<8915/LX%!5n5..AI`
%E5!c+?3LsM-EW%NN\`io?0Qt4GaZL)khaU+F+afk<XY%BqK_;s_%,E2r1ZAG_H[(3q;UZr@>%RUI]Vs>St2q`j0^cA'75sO6NNI[
%LR5*r.YPg=p70GhWKMBW%&pI]>;pp"CTN^#\>Fp:(c9@fh\HRb4qdREaV>%7Z2"XC'8kJiC#]P1f+GXDPF6+?oPM"V&80Y0p5+U]
%SfBFjKLHm%/W8/jPH;AAQ.jJ0XH@9EI(+$K\YnBM\A/h1^KFI;B6@ih8+4`H9!!m'C,`/,C$f@p'$8U?-j!ahL);%,&cfkK??nqE
%=C0^e$Bh%crh+32LBL7j0d0&3W)OkWA>U<G-ucZYN2UN":Wr/uBK+^Tl(MMLLjMW7lJ!A&VR\5DYu7R/A#/1IcU>q3I76Ws3>F(.
%'IC,27U*g=Gb@$o+0YLNl1`<n?)\QTp'$?s#WB/?_k4j[/nu=nlc_&V;[EDh'\G14F=DBDW)qJ1+TnlNUndK'\id#T=u^*j'uob*
%:?Td'g03c?<0`HPDom4(](\>T!TrAs-3j33Zk<Rar0bIa*?c<q,M%Nga#@qW4bXU=dnEcsmq=b48?#3iORLt2K"aphk57f0MHgl:
%gX?ftoG*fC,`lf<Ohp+unIO.k,AeoPhkZfL0WRIV@1S26GR;u'%%#)?_K4m1n+/AYQL8ISJKZ'b/MSM;J6d4)UL-t?p6R)Y>[tQC
%4ElEWk=EGkAK&8>N-g%LWYlN*CrD2jH$K([DZWQ\gJRu40%J8mF%*R/mmQU+4+JY\S%1g2jhps%"CkfsY?^#2<\)H]SXkVNEcPS:
%>fs_ol8(lY6>L5r!os.)#RNQ(%@[a'@G*4V>dZ(JSH+E^*o)X;`.JudY*U\A(@!+rX%Y7u:AH#E=)$uFMnOfqnu<mqD,n"X>:,Id
%7.-3N\]VNFS:>322a@Kh6<LJp1W9]75gi0(Vp)bBJQ5/="9QA()8:_C?:6h)LiOCSZ@ca\ZPsY9_7e\emm,#@9VP_m`K,e4J>*_g
%JP*#0+^U2b<o.pJ1,r%#q+A,5+\[Z>%#NaXFsIX"hr5rs#$'r"/b0DZS'^1,GRE^ea)K=0RUcu^WS8k2p*$Iq9(Ub@EZEA\Ec&^=
%+ApCj&.g?)RUE/!`EkMES5@9g"nKRopMtgE^*=(33Wa5&+fD'!!Okfb%3nFY/1Z1\C]:!Pg71aA2R?\S;l/>eaFnA;c9&E$`V285
%4H/:(oW"m,a4BWRP-W8[_%A<d`S9dNaidKc#@+;+Bcr)9r6[4SRd;Yp%(pb[=RfLoR4UaLF<./-L2U1S#A$>q,2+KQ;G[WT@$X;*
%VD:!>Abh"\*s+P-L2U$(898O-rX`\"SI`=_9Zeu];1JrLXaJ2I8'Xo*ip/MVa5r-&TO((AWBOYCe$"=ne\8[(Qm,581lQ5o>(WXu
%1PIHUiJtDK!_e#Y+)3?;K#n@N0FdR?e:I7Z[a*A29HfG+C8`l=3.(tGm!Sf>ot4[qA$Sg@Tk1#^FLm?m<ct[aq#Qd!s4YOR+Y*Ue
%3Q4:#o)!gCg:bQ3P3"C"RR0FiG;p`=f<;t/%rmdp:">5MpasA4W"SN9m#VceV3HVkF0"ggV`2(Kk]hgN/Zi2U6#/^\VVoZ9HC%PJ
%U3bX\R`:o^">mQk;d#=DPo'C`.u]JU\em`kXPu#jkVt1j>/dS/qc$s`)nNfm^QEE3TJ\9b$1]20i<$JgPWn5F)2XSBR._.-2$@`Y
%-K)&n&<PV+3D&&n&Hu'H]HE::T)L70k$d@eMlQ"ZX^6\al4W!22Ko$Zqi]"ep>32cJ/73@H/BAG5d"f\]g&NC-JKId6d')bIA+e*
%O]QTe;Vbf<jkEg5UM:/YMGbNIf'7Ef<TU:ZZe%X(J&Q#Qh+lbULIC!C)]*$L)b"r%7')Y?!!HUh.+?f4-[kQa#<1r).ddWs%&#R1
%0'soOc.k4+nRAL8o,/O#G(7Jh@mHW'=kug)4]hp*C3/<^di%G49o9m'mK$6B_JuWa^NN2=>n^_b-Xh9/En>H&s2a8D!_VG0bE_?$
%q'COmjpa3-)"O!nQdM4/qoBk<>T,.I$h[W+);jR2>sGHiB2WLfo&-&98NVQ5*tV;\'\ZtQUDl0Pckr>k6pdeUKkdYsC^X4u\ll8c
%!L[5PLINGhig^6n#+/G3,Df3@KW*0$WIK0I4@8TpK\\=%8`hgYE^'ebqGlH>b0[;[B,cH@BbFVX3I0)&?u>3-$eES)3^CDC^m/X!
%hu^pJAP"Sqdu4`G4*%s+puqNq>Gc3i9j^1-YPn6>I'^p`2;L0Dqn$kn7ib>a+sI1c2Q-,B-q;].]L'=lSiSR&q^KCXD_:&]?e?&A
%,-MM`?_]0^;@)^QgSbE2`\-ru,t8ea_'S$rUo_P]YF;G%2,BU>r)dK)%Hq6_\G6k[(J&5W<7YhP7e.#</8tBAnNc6E/,W.!,6N5U
%-WrYjCJkEVQ)DmGVC3rG>oJXfXd29*6I1)EmeibY.W>ntD79#08'k)1a1uLGZ+s6.%?l-eJ=AUq]h."AKuF81e9u*%Eh0Q'R,`k]
%a@&3d>)QdehtaEtRkWn8FAj\T+H$4C/t.M.+%b\]8^^_#Bd>mGJ9h>KVoU,r"rl([mo%29,\.u+8Wb8/Je`*tNLJeZ;8!-ZK\^VQ
%_-3c:7<oJDTUAp#-^9u>9Zq9oIiISK>/gkCg@n,O]`m'S(Km<A>ui18Hg%l#7%.M;_dnH)r,L?*2(7-KLDPeVPRbMDe7MMt$XMZ!
%qFp8OJ6Q,-iCI+0ZhQnsW7^b8Bk].*q$?GqNP$_V=OXe-]m;jS%k!KQ)M(!7"nPo*J7]`s3f94DAT1Q9H%Qi7n9r@%D,&7,jq@9B
%btkog3f`s_;$>?OmubkEh,hgD%90Vbga=hF1LfTYLq(KfYPF`d%_e"2F#VjSo,C;^%^<>KJRDbr3S7`a4PG@qn.1m[K>i+com,-[
%;LBo>,g=[nPTNO#*i6:6*aj#H@KaoPr&"hlUgYQ85a\tes-_uhEpY)'Y^i/6j*'N/XguPEYNfo[?82MD2jfo<T`TZ3g?IH3j@*J,
%6)-e.WD&%)>#H#R>VQMRqobZa!hL#uBeELUSq/=`Y"F)1fC&8\+nYmuHf'mC?8["A&n_fq!^etd>.juB]oAMk?6#2ZX>f!;@JL*a
%0,O^j2jkjc]BK?uN3_9[$6s"KA4D"=NU_Fj-.<nh'bA+r/:gT/)9"9oG\pAD8^1bV)5ng)BmiuY#Nh8[']oV<f"uO9O>F[Y"AOmH
%=K`;k&t)i)<jH<lUekF"T<Zhr(^L>3D5chXRfFY0oL`etH]Nc.P6;h/Ho,MeT9<Ftc>/dk+$1RP]=%@$<"',N_QjS.%HTHTlK2.W
%8NZcHCO):r#YTFX`_;PFm;4DS<HbKWfiBP!.Da%"fLTjUD@L55Ij6NJjORMCj8+bW:Ipjs=NQW/9bO%mokYC]q?l97RH]Ns3$:n\
%]\77@MG]Na7f^5J?_i"Lk9:iV@EdR,NMS.(+(ohRY*,%=a,s`QF6mR%2VFHSKWC[ACObuu*dEO..Muc9e4kr7n(`u;GJD0sOhqVj
%*sTMt:BadgmpiDJ3#a&N&[[j1$h-Y_-)jaUEGhk1n$,JF(_1VSN\V=lQlr3c*VsP-lYR#EmZO#/OkX\u@Q/3jKcB_`cHiJM59Da_
%%Xe]<Lsa"In.la2GA-'nAJ<THVlpM9;hZr`S%+X9aHB^oQ1luC.g8U!I`*->9!Z%n3e,S?@B(H-b-2!IU^b5,&?$^=GqD^U58u6:
%en2h))HYEr+!bSEelbsqZn&]<%E3p(IXOc[O/C:[@C7:-X:,ARO;*0$i?icN)bB";=^CEI`'E'2fp4#-HU-"VB[X;e2)N"=<l#$I
%8-b<-mL;k5!G9%4=^Re'==K1Op),#A4J6rX/4$qU=FGh\he9RM*LEXmNPX[4q!:lrjIiF[(1dRqf:#>u.o0N>L(4]X%HujmJQ,H(
%@&5t,*9PU"k2gj;/+0"sEs:#,U-4c0o#J.]qD?l_ZTpDIo8#2_\T2ejJNB:1#*O!>kupM*N0o#`ME0mic4CAp/abLPT:C:]d$3TK
%&;pS/rCL%J_6=M5VqT6O>40ki]%\:Ke?2$j'iHS5L(,IOc`=$:)b`aE&t-1sV,3u9+UdQa8G"T=,7,>ij;q]Lm3RRi;op"]6c1\>
%PpQO\,g.6u2#.p4_=P3<V>46E=FhP?<Kn6W:uZ=4!Y.M%^9je%QKf96@T14hAE8*Z0uRtk7ckP>qfXh``;M#SO.o23lnI*3bBE)B
%%<%q@ZHsaVEFY:R+iD5`hgod8nN6_"m.m]lBFN#*Z34a#DVHRs78S!7h,T(oL-KDbirGsH%j0K1#3h$jfW'a3#Ldf@?HI,%@j_9]
%;Xgs/0m8FRQhAcG$DgDX'$%:hs3cR&L,Od_i+XJ>%ONj_HpX4#BFE^4WbFUVRFk6"VOE8#f^9]T25]F'C\]G^h5+dfQinbXBVe1d
%0;2>oF-)gha$T,TrXn5\eKc@?B,jJfhR:L4.=]E&MjHT8Z$e+Zou)h;8HC13l*VI[hPIC:JJEr7Rmj;E4U=CjD!ErQ_"9"*p$96u
%CClghD!E5sn-#Y";\sU2SSc3?Y!s2Mh9'-rYUoP6JE`H_\olTog7Au0?#eV@SWIe,/q4S^M#G$<'<5p&lF"W.VpqZTdCei@6^Wm/
%;8Q#Gf:o-fq=nT@@$j?1>f1id3C="jXtq*gU/"3s(=+&bL=AXoGE(6m5%XdgU4,""KIC8hI@FI:UmR+71$q`7rODPeU>Q*JO#$'F
%Pu"kETs1fdhpmW$)d(eV?$N:A0Zn@PjBd;fEY*-[0m\AZ8GMe%9:SC*auL_/+;=G"@<00jM6qWkj&fZC7F>*Wa4bH9_)f<2=4mKd
%ftnZ7`#ZfOG8,iUG_YJa-Wgsmd8OD*l$4?-R-@A5fY<)'49\D<eTF-0nR?-RQ3\f^4UAQWbK1UG'G3jI8VtQ_4na_9_nNtXi3)"$
%DpKSoWY`+Nke&F7qhQ4>VCB"#glqtLYdff3^^08d[.,"(gR]9@mG"?9>D`)PKkUZeE]YnE!S,7&ZPj:AkP[8PKS2$QT4705)$&(L
%n6n227o`>8L2i0HFi:-\JU)S6-UrEtYQY":[P<rsf9_1&l:m!q4F.#6gTkfENXO]'0k'mq8$,X>%l#+(U,P244dTHqFA"Kc17mW+
%H`9V`JLcjGCY@[i\``d.FY,a?;g4aSZQI87@7+]tRbZ#>HH'6VOh/)ZU!P:Sc?@WtIr-Rr>gZCe-LZGW'9.cE\T9G!5=F&\\>hl+
%>:GLpmmC('jFI68eiTo.H+`mNf+s#J,!)9?.9ioM`>V#\!?P'#@:TT[85^;Jd0NFsZruG>;pi2pEVO.BT75>0:JN5+,)GZ#!A047
%F#qkpB$3>d0giDgVCbdTr5K9Dq,?:/?QU$@_/4_kpku6AFh\J1!NLZB:PfI6=rBGb.UEZ?2h-!1N?`:RfbB`Io4\NRnYUE<<Od`-
%F(NLa,]%GZ,1pSY.mA+q3:S\Ymb3KqdAKn"C*5+P%8'/F9p75VYcfXVr<&nlg3<a!4b!%@D.m-qOoBTGNq%M]I+,CcM0Fd0`*KkO
%>,48'A="gM-n\%>P=#C;jdQ<.FqoVNk9Ka7EE9Z]cJ$f0-eeq/62dIV^a-GKOZ6;a'.XtBQ.p@l)4o]FgIFue4\AD/2q`*DQo`\=
%^N?K"F]OL=FJ#P"#Ct&U59*#.\E0:n[HQ+MU8FNcWLh)`FhGEQ6&%;G.S2GF2ksVU282I=C1"U06p'13q8;2JS7*.,qI]'+H>-RE
%4<hL)L4CYlN5*q=Q&/VDQGH*7L'26R$=`jZ\J!\r'1'DF86-e7LnQV<#clBr).8!:*PL(6@K*<Mqt"_V%NF3Q^)bi=8AOMF5OT;4
%QTrs_c8<F8'I[h>am&.[kg1<D1S_EA!lRnSOYL]4=7od7XY=O6H'D!)P<cA,hXL$kYH*cC7X_-OhL_^[NM332Hul^rgSuA6MPO3S
%lkFQ(JUH]=Q9V068^m8[=Bs/kGSQ1Xh1g'-Vb?8*5+^T:@>oeeA.X'QSG@"lXe?>:c#KPlqbTsfUD^X^:0e9UXaVph+nP<$a#+TR
%>@K@J#F.,pf(X&[+PS6*_N^ed._Wif%&=Z'<UC^)TO,24q^O-g7hrFAC:h0=qhd\]93_<R:9C_oBO'$Bd:3=j&uK.lgH&lX()<T%
%`s=W@mH,Ws.K$LD8uJTabOFlo@dU.N';ca-dn,WqI<>Lh#GHkodJO5269eS8aduu;[$88P7.CUk8ihMu8";:jh.55"HY>If(/&na
%f1WJh")oO53IafmM0DZ(r+2/KA3iQk^(K4[6Kp]uEXYVB=mg'nd5Y!ob::Ttj&8M.*;aR8a([3soZ_Tu$oei#@Tc<u`7Q<hPA$*-
%=p]oF=2fn5D-N;H2EFM\U`l).Z)N.FC5`-sOc13'mDM,d_,XCmU=DK&lH#F:iU*UW]jA\%Y^?mFI`H[OdQ&s`]Ig5dX.(l<L7QBs
%2U.[i1CLZ1S?KsF,nHX"^02BEl2_Wo9"^rh839=9HSmdpaf5CgC2nDS&_H?OZe]toVAgF#o;B.-3bUnH#2[54M[@!LZ1FT2alHE&
%qj+c<#n\N-K5C9$JB=lq*4&5LXo=hX5]q%+Q92![&p$CA&\oA*iGf>9E5T6&'T(@qrZ^E3BH)/8@_PeoD5#?21AaWRA&WjY(16j1
%c-&8)nK-G_EI/VCr8>`P/P"80!u1fGJ@MmF/9\8H9)[LHnQQ_;T+r>IFj:1M:r>MDinc4NJdb9bUjP9Na&)h2C^_0N'^gH.`Yj'\
%:X`K80Qjo;:`Q/fK-AXN9l/WjjOMNKSF.#C!Mp,C@<m0[*+O\jOL_UVYDt3>_4Wj&.@Z(*JO43<G%`'edaD/tSjBIk*cC!Z_mjnm
%5Y/Kr%pK<M`bD.a*.r4oCZ9_ra\?6<_?nauR-\4@rY1_=;j@*9%6=F]OW5=+'kg:-'61i/me@bHc:>\o45*6sJ3ujL9a\;J2odhD
%#Hd'1E"dCiBc8><*H^:-HeQ?GNPo^G\/&!JHp4ITX<W;*0WG-g7Ai!<C0Y"CmcKi'dX5ZCW.rMNGtBlOH8k]X>_,Sj+h3P:7+:,A
%p%VpF9C':e5$m@"$5G\cUO#2XTJ81FI1ML,?!?ami"fUN-iqU(c2h?fdp7&7KmJJP>:7N,ZC\Xk<`EU^aW80rGf(3)ppc_^X.G[G
%Ui.D@JCVh'H@cLM:t7ioG@GBh.k=<JM6X00>5X:;aaR=uW'_b:jrQpS=LZn!@c>'TF[6:e[i0a/k\Q[leOUo7I^TAcP`n8EP)3>1
%G#g*K(7MTQkAg1+CimS!`qd_aZF0no4IhQ27fFEt8DqE?R`qDRn'#1,Waoop.-K.rSP`LkBn?er2%>D;d8c^e!pqEsQC3(D9&!+G
%Lc_pbFg+EH[5#VehEdPrq"],DS\Ic%E?6t>!n9F575NE6%;$\">ZC>H&M_80a'&A^FH7G-k0A)(aMM\n-#&j2=AZ[bjTmQ]b?B3\
%2!aOm;mijHgGoFMi%Z2t<lLl,l9hT6*\0@S<K-+IMJqVB)>7e2/b<NU-3Jq[-eY"@moED+/@t$1!i\KL6CfMo1]9EBZj(!Rb,W)N
%(,Sp2MG4M0@.O;c,d"9Cq>qE6-P.Wu^S".E3RjUoK1KCh*\A't%[Rft&E+"j)GgGHn=2CYX\/,6W?*jd:fY_2!$`pZ-t/2K"Kl:\
%$$m)qn1bG%">P9MVa*<k5q.=&qJIuE>E3!5fYmDl9;AM6>)=,rd`)k_=WtT-E^l]=:+dA?]^nL7?pR"%$tj'WWbW:H+hqcWIn6\W
%9GEA)&4m_V9HjnVdW!9G<kAb7N&q!IEKamq#u:kb9=?W3M*VTmiH2Y]5OS3=acdQ"9LVdn!Qn>*Arj]s$O_r`G>@_Jg3MMrZ%WX*
%I_BPZ9Q%5hdXFM8'*l(&4ZT^!JGAjRWe3E_*;U_Ws6B*@*97k<(;cH7d83>%Y1?KH*l"i5!b@FD#<,7`Lj1YF&B+-B+^TPNfZR`m
%RatU&g8r&1l&oKg0,Ys3hP_;)@L&YOBVS+#Ju7oqXI+Z%RHM5n\848irDEM<(CRJfX+U=M>52a0/Q+S3@l[N..]>g'&7n^u<BT"\
%dB$s6-k0$:C.]#13;sqFCfSD\h&OOaP?]UtA")fpPN[5;MZe[0Z!Wm-4t^M5Z./?1-Y?"+'MW%WSX\2*Ul9Os7nLEj.aYS@<bqBR
%bjLj'Qa9nBkV:d?'`0%kJXqI4eK\5bqek@r$B<&SH^aW:QGm4@c'dYO5Q#@_,^Pki1D<5&:B?=j9Q$fQ_HL(D)3mGQI+g#uMN"K%
%Vb'W(9[HGZ?@B_\[:k8q2)RZM5?(oAoCncjO8T41ppU&i3h2lo$o^:R$AS)Q:4S7%lu7qTQ5;YgKO,KB7?Fa\Y'o_ZKKjA07ko^I
%OOnAmIh2UjX1jsd>B'LQS8ai!EP>TX-Yn%?Q@l6YfO]@!Y+1I9^&ThsMjQ<4jb!jJB((u2)+d<U&u_N*e&lf]CC'XL;a=eZ%H't+
%Kf/&+Z6^[rrWIuWVB(Sh<YS!eL`j"i#JQ7l#:+-TY!&+HC?2akUs]fD_!B"`n.5=MmCoY\!#m?.^gunYNDG*.WfM'hMCLVQV5+/_
%R*Z*KVC^#d@ME-16_t$@!+-'b2p=j4ZSn1_ahs,!X&,SU4^b5N!N'^iHch,<8X6CCdsd0T/JKroQL69l![GpK,0cC4DgM9?M9d].
%=aDeOWZ_O3rY:0jL0(\9RL^LWD8I`I`BaMu'E*D,amKPSpSY>q]C*"".4]XTR"f1`c@`_GVsp.p_&kIo4(.?4$V5bhUi,H%.+-Nm
%17(b9luM%g>EYtP92EC#*<d#:L>eNF<%p#h)HYq[LFG]NK@r]$n8LBa351ph=<GO0o(/0!SAkWh&@gB3S\SpM#ms]M!j(&CL<#PD
%U&`pchaUSjMRU?;j_ku1_Ven40+mL,0r^"]N@@>Ei@<:GVg)5j;bC@]'$C\`c\p'"I/SNYF,]U@g%gI7>L"rIc/?/@<*C'Fp.ii/
%-9MI28L>NcrfmL=R(a_R8WcjtCRXUupX$<H[#*nM<19&."Z0gk_0/"EF`CD(rg[4V1@_6%"dTD9eI1(%'4_Y/_ZF;,YV2ing`i!E
%-oA8MUtl[]"fTLN6lDfK,]"LhT:Yd'$r2d7n"TH6-]]-C:#SsEYi,I<lAgXj.<gmV+9NX-lTmq;\8M;mn!IXThAl7nA_k9]F;?M5
%d'1#W.`cDCPQWmA%c<*<@YBT8^&m;*QB/S8*4n9[(0_S^B:$+s1LHm:#mhtK"FF`ED+eb-Z459$W)4eu0@@TaZI8r\Gti*VD]#"e
%d5sdu,h++EoG06am0<c(pNW*knZ'+-U3iV:MHKti0?2Y+Wp6ak@S#Q>hILff5hlPE=R@s+@7c,;b:#[C+R/6h;.<NpVnRQ"Z-1>Q
%.d<QFJ[EF'&M&`I!Wf;r3k^:==&jAs8dEl;;DVpemaTqLcRGT#b0*&<"m<>Dja?=UF#YIJPF'.hcS4t"E65:>bT2DIarsT"r9KFD
%!pdp<,Y.6;+nd\OA0;utmgphVJ&)'=&\CCC?`=s.-\J6'P?8V,O]n);U/4,S>WE'?5F\?(?YO@RBPaHH(H7=Cl[?0+YV(:nQ3r8D
%W3RH&".ZL=3pGn!"Js(dedtN[.@:hF)Uj]Z@pp3i..ZUN!.O<qne!L[<iOYMHMF(274u\"\%=uM_oWL\*$Qm+'s<CMGD3dXDdTA_
%6`"ABQIkQkSB(c<g@+Ijb_i^XGRu(:qGA`SmsVlt9Q,RJ_s1g!\!Q[Bs8F/`[_<Qi_Id2eC-RG341qk%\+N90`WM`'k:P6u^-mil
%]L$!eC+T`nf0*O2'rS&7Qb029L3`6XMO]$=aUMjX1+@B+D:l.fL'Ei/Cj]>YVj"atb%9<!<.$Qn8;_s!#EuWH8c!Z'dO8P@2Q(7t
%p!Ulk!Z)oTcn^^Sg+rKYV"'SN[<`Z)Ychr]hQ/Ii%c)Oig@i1-=@4BK,2p@[fCpe2q8P]R<Zm1*3n`p:!&1gO;?`Yl0VteE5Li)&
%LEt64>u-n/mM]&U.:K]Lr\V%<i?J4rPH-f>ZB8kR+/592Y'!4Zd_.KfPY;W-dW:(YbRcE<X>Il$/goPXB42=$BH.XrE&ba'Eo?Gh
%7peLb(.Z&lpV?0Y+7Y$l9</Pdk7cWjj+1n]'VN4\WEHN$ORMKq*/FYgYfE6m:"W$h$s-"2Q[Tjha,4%ELuV<_X+I23Y.nZFe2X^;
%MK<rfIE/V"h3?=?Th\mijeLmOe%(<Z[Me;a@a:b<gCrN5FAeSV`l).K=ielM09Tgt+'PQd.!GjonO)>(R+\qJ*+<1Z<D&9h8$fFq
%0,i97MR&1cnN8WM(f@a7Od^#k?nuYj7joV8RLP-JDhe[]6!6u$Ku=B&pFAi_b4NKFA![$!6Q*DbY3-Q)%o\)0V03PtPZ#D+.EPm`
%6:L)()O_KO+ihgP5RAc&"+k!uGt=7_IPUjj_u`C+2d'kGmX;tEq9aY'"R[0h2hL-gVILA)+G7bIj6j.UT]OhKd61_iGgB#3%aj;j
%WNK@nO?@OV%'qV8+C.Q=SNaq&21_LZnRd7Lct"l[5:@k,^L(OE_9V=u=h,fZ2,;W)C#hdl^*D#/6.<@`RRE3k$1T:-P%!1Co?,Z_
%=@%6_Pq0,P'`F=3,>;C]O$MrL48]o(/(:.G,%q?!HVb76;6MgmFPVsYB@Pm[0$.PLN+5%jbF*=\HF[_6T?gE<,Y'\nCU</)c,/-_
%`a%mg>,36=P87YcOl"BC'KicOmXkM+[0_5[T+@hZ_o2G^H7We]g.k?6#7%KH9:bHQ;b.rOcWNsE;_Yar1/8]GKu:,s=:L=8Y!so,
%Ws@Il+eZ5]6[W5ENthif*Qnhh$0h$0DTAZV(%a=1=\qjDr&DuLisA.'!;`G7bEp.f:T1DjB9g]4(/G5ciT[=Y%e$e(o$:JA#3jJb
%"Y^=F"VmRNSPjR/eNLJ6n%7)t$^dWODq6!"?qYAI-Kgq]G&`cUXA2r>%;]>I+U)g5IV7@5r*,J'LGXRR!tdCeqd3m1\tdToYIB&7
%LThUT^eclQ<'/di_Kg7^i?3'E+r.p<L#,"V%;rZWP:+[oYCA%'+8lUUhOV(H.K:QR*@<:6+W*/E#Zg+E[S)F'lWTW3d2RW#_i(^Q
%DIFik,FTH-nIA+nGH*O\$`5W,nEl)T\OlRO<k@)"eWd-Y4pDuqPOZ.4#a<l7j$?9l8G/lp7g4P`-/QJn]V6ZDmQ:#'.*_l-5G/"$
%\t>'Q0Uun[T\n?)<:I9q"E72n0XltnMiSHJH$STrkCKReR*EFQ0NkJ30O9V8[E0`36#-s'bC7F-Ob=]t`kOW,eFA_B["Ul_F<ui"
%js/:Gr\UcKZN'JI4,R61dRGi+)FkgE4PDHMjKH_VF;0n=;$b;Q(gHat0L:U"coh<DKNck<\Hj5ODF8$7LZ)@?8r;H7]-ekFjkBD(
%8:$+!J'ml!@7elK`%f0uE59Au[7kQBf4C%WY]<ra]QbU_S#Lo>f,#bG>km[+,DB#X1'kLe@/VrX"$AZr"B4q*gL,_iB2q/>oQN#l
%RIA`@Z[-*GrQWkXop5iU3Dca@+/[NHrgm)f_>t_05@n#.LA8VeP_0)#='PN_Y3A27/ODIb>gA,If'K05E;G,WG]GHG856j5fU+bc
%^l/"+^nnMY)/THBR!E;*JnhYT4%BR2Xe/;I^mmgsVS1ee[k2T8=G$&9eGR-bG(Aj@Zqu^^0o^bjVjW$#k-P@09<<h.9u6m(bCX7I
%-6g>&m9Zq9?[[TpK^6XSJ$IN,Q7=hG3dZKd!ceE+=_:<i'MHg@48hQ9:+1ued)VD84geGmTh[c&$RK9FABThV"j*OVgV,!lI7[9M
%hq0A4kS?1P%]dd+qGnP"CaBj++<:YJ-Ank3YJPBMIN]4u`!NMG!5OcF-m?3A1ILtMQGkUa%qAOd/Zi,>j/i^E",i+d_n5qNZJr)l
%EfC3kY?eWDbk(UbUf_X.;jA&_Oi^A&<m`G/[)9C;PlJ\U_OHB5a`Z4-rX+X:J$@irn),:O^CHqI<+GO&,)Kb4](V\U-Sd>5,TsUE
%M+q61>#n_Vg@`:nbb>/I7`TY\M@.A+W)U+8BGr4q9)D+&Lt#-&e.g"!=qifMC>9hrd%nf5bg?@"<-9X\AT@R,p89@-dI`!kBuG.2
%+)\0Ukb/p7r;p3PB(S>%5H`r\?/(E)DG+<;<sd&ZQZO(a7p4WD/Ts[m0ul!k9du+=HOtGe0)26!<CQh3U-!@!bJ>qHrF&7[d&s8h
%^,tf!eZ'o[6n@8^<?8O@D.2Q'Latt!ZA&7_A=MlHjEU8O]$h[\@B6^%#gO1[Y1SA#Z,OiD9J`5+cgN)-#5WXtGImliqJ_L@\'8fF
%PmVuIdbfZZj6[U/%N_-'+hge6(jY8A^'Q<_,a_9\^k%5C!7MQ^$7;)[dnA+l84=3'Siqq"@982tU\$<]LVSf7EPCpm`NIioh(9t,
%]Y]t,/<UN"<\6(L@*BAac>AkeOAEEb)8)`I&&'fk!t1jHH)uU#=CF5!:"b!hakO7g[s*aTo0GL]941Jl<YgaF3[*[G'\eGk.bLBm
%,^hJimMm9M1P'?ALr3\6XH?*#=cFlk:]k>e1d!Me9R=TCZW\.,.A6gG;jL#7$<ITnQa^pJ#ku7,)cuYTIunI3FKi29eK=;]A/is^
%P3sLDTtH1H7T9F&&'pKcBVE*uAu`*JN8UI-?CZITYi:rDBN#h'g6cBd'g-C+F`Aic5.hTj"M+rbWtNIHF*CSs>V]SF-OjU(hj+`M
%paNtZ3p2ppip.9P-1JeigQ$#IIE]=b6ArlJT<-SpTMpmNGMJ+kb*G?G7#PS81\H[-NZV+8J@LZ3SJ%>EnS"F=X\/lkoCG/+`PrP=
%!n1-_*UN"^b)q?UL)si@Iu*RS)N(Xf&hi/a&i_c\QVq0_1_"1^LnqiASEiAsG5OW#9tL^h"lP!=Hf.V(!;i8^8uIbJ)?<nYRabIX
%qC!ILiN>JdqWhe3JcJN6l#-1lcc\9k6r`pgE[p3A7\$"rk6`dQ>-<6-;aj]$a$6cV',Cu).h10\E0W`>o<tQKKq^V1_W"h(_iZ@6
%0iib@C#F\^dBR!'q<c>11;*2t;cM]fSm1V1/qH-M\<PhA9:fG%G!B>^q!%JoShQP?&b]"<etSaR<QZ:qM5V7UYA/JRp2?\sX%nHi
%,_aG^*mQ.["1K%V3`=6lDh2,nq/sUALKeOBRUcjn(7=gRE"P$.-qtR>CmtjI<OQt@Ae-UJ4nCA0>+"riM$c0m&Q&@"Qn5O3(fL0I
%=@%E[f0`PNpiCrp$*Qo<!)q]ZRJNr"nqL_Y#[r$GH1fTrfXL)*aL*u*79L%l]!C>'6Co;A77A/%]m4.LBc#l]j.\(6((CNg"Ro[c
%0j\?_!qWg%]USdJ.FH9UJY^LP4_h^D`muB)Z+f9OZZSi>A8#Y`j+r$#M,mN(o27lijoc>k$RSF[4N_T\]0u_gL+2q"]F^NiMMn?l
%?Kn?,Nc-Y8iIV!I..(je-'0S<"1O#_e"sT1+.X@#D!%lp14V\gEI@@&e.eS&pVQ8U;#TX:X:hJoHVh5--W*N?QL#cd="gD^PNCgb
%E._+cSpr,.Cujl$>;k*kEsR^P2N7!qU:3X?=DAP,".*h"L<2#-8I-,kl;Wtq%8^aUY:1m7/)5L%as*E@\S[T]19IXMLZu]Ai%r2K
%*`\>IN*QZ]Zlm=fl$m%VC+K[XG)F7]s!GGTK_=\o2ZlN@fC,(^_7$fEqf]!Gfg`udL=oBSoP]J,C7(W@?s"tGf*0nGeO_Nd3<]=5
%6PrgB2,)j/=gtbEJ7FfHCj"_NJ@aP%f]=j[rUgVNH!;/Q6Z?tp-]e"!h@AIMQh81e53+PsO-im\hP]&B$/a-u^aW/;/?Z;!Sn52S
%VEh.$YF7jfU=_n)N(H9F4D?Jb-.\M=daUt3ifTW`?3)+;'M'AHN[+0Zd>$l<$%U0mZX3b8-m_u\/((!$3JhA.1ECmfS6%f2l$R,V
%G?">L!9$+=oSS[?+JDh!B.t)6%nd]E(72%a31=9o@ML(pIr(,k!!#W9D`Z%;K.P4X-RPPTd3>ShT&'d4@:'h)chuIDjU;R;S(a"Q
%A;)lZGB.G"&)9"rPuE<b"b!%lUFkP+);i;UGW4gr!A(YV!,l?eR8TI/?]nBr[*r')DINc4!c[3'1Dm>mVRL2f+!^Z@h:[f8Qh;3-
%:hG$jC>9)P8hY+sh'^RK;[pO%)5ODZ:k`^VV4m,dj*E#47lNH3UudtZ1nKFcNk@<ppRC4*@D9Q3Z!'6@([0Q:%2-KA>2N#Cg1'M$
%KH3Cop#hcBeh$I=[I'[!AK(>:Ne(Rm+3k%c:$m(NBbN1UY_PunE1[Oj+Y`0W8+I7rV43#I+]Q6=>rBI^9KAC6D4#gdE.9OiG$\O@
%@<U'PZDLCm9"'gee3lKne0R:1lFZJ?bN9:cYSrb#MWL2r$XkgR*+6Vd@0\\^eDM&ng81BL2>,@)la'elpJseW=$<AMaO(`s*a4W?
%0EjnEiN;lq>d4\3.ojV6131>NXe$@^-)#;5:9/UPmaS]ogK>BQI,m/ka'HBI6fOMfbDNjlM3<<Qloi^e%nJO=rG7rNZEdN(R$Mhq
%H!:pCrj;&uO\A=#&b0GCcPl%31F*SkCuViu.=*9D8YTt<CDieG?=qml>1U$Fc]R39AR*'(G4'jKF$[ZbKPFFGo2II/#Oq)DZu%WD
%a\a5mD#1>h,f'r48VA6FV:7+jfRNg/rJArHA"!cgD-8r$I:6@fWb9N7*NsQ<1(tPD^KJ+OLN1JWU$6FVH_5M]d6(6(_;?@k0!p#g
%lre`mj0DiG9tob0aX"h`7=s=gj"KGVq9<DplRj)V5H;Ym%rD1pSW*dM+S;GQn=5*8H0qm#.:Qp(e'J3)oJQ4G.#MaiEWOAI&+[2m
%$CXts-'X3m%Q*Du9"h1WYF/F)On?oh*ciGL5n:R*/o3WACKU)6]MHmqpU-<<)=CVu,Z9kr@jlpj82<8'4Kg?:%&0">+s6=A:Mg$1
%f8tm.q1CQ7-/fO4Kkm4E6&lMJK_ZS0i=E[l3j))FX*M#c-F<CZjt:-;:t&aD-"GI!AZM7(9m6`(G3[=L_'C?CL0Win4pf4$a\R)d
%*3baIF2WX]q8c>NC<i^e```;>?p\5P"+B,GK.od87Te,b.^+`Y],=:9'!6?^Ykm2&5Zlkl#,asFSuW%KY5Vk`Ur+3MWH)^k#klQO
%c)h#H\Wf?88iAr>%iF@CHS2qVnVP;5#f&DL&0NCEJ`TS21;-(m37"^shm95FrR*2da9mHj,4P-r_h=p8Xa+'=`d%>BB'tg\-m6Ul
%l8nCG2"Xd,O\g523u^iX),5\_0`,+k6G,mO$sPJl@0Me?4C[#Bs2)_0US:OkCN1<_`dMR$4GpCkpg@s:$nDQ>fluD?n-gSJpY+[?
%kiYVqDrnR=L^orsX-C%8%]=d.'U_7e#t<WQldTo.FbcF^iMGrcA0[(KQ6CE2KC+LWNVfBrr@1+Smq*i>X8j`!GgK=F=hS%J(`U3?
%dhC7^oQL:69"uA51C[TX^^VS"/$1Q,P*:G0--R'SXrIF$CW9*nAug0p='@tF9u7i8&^.ek<,MtN:H.M6nO3c`VMgC.@Chr_MR;H5
%ck-nQOIaAnjq]V"3)N@9;pY>H.P.SF]7V'4f=gm+Fb6S"B]Y3!R?tGSppZ\`i:W`6]UoTLMrrPA6FD<oHK!bRBeG\MIIm\K,B^qU
%jRt)@K/H2$R=;WLfUk'?m&Zm.k+q5;i=Mc&]*e_MDO'If%q`Y:JJcX)7gAik=L`;ga8e3cSlSe.E8t'OoA2Wo[RIb3B;':G*c)N%
%:i]/.kBdOQ4-Kq+H9b+<H<ai,VN5DDke@GZ6rk\2GV)l>66eB4$VkMPGC+\j%j,G$M"],`!i*b"(J+U[/A(TAVt%'n*)IiX9%IK_
%RAF$MXu4JQpAXO37;s>F8GF3f514lpr#?0C=#`LMOujd!o'jg>YDO;_gk&>(!\DP]_R>NIVTj2+^r9$)#AI"?^-p-s6WpGZ4N.S3
%Tpucn3BTa2J%5BB)G7rT>rVQd->4^mK14X+RLR_aBi68uoS\KlO6H!5a_>q1-)64r+QJ!DGdZT<[5W-\C@s*K,O0+(!G*HU#NW&X
%]UWhjT.]X>Hjjoe/-VHUp<)tHh\#slIN2kl8:^TU'+0lEHGhu;.q$fr@I&L<hK?f9=c7S<@qnMi(S,:ua<3L_Tb7iIeIE+[%:*;0
%^\/<"mF!\Na(@@%W*QP/eMRJu6?',n?C4Q_6TIb<f.>%AIY@QUh)$ogLG&U'Sih@k8N6nWJ/?mqjuV9,9&cqsibV4bC_NC_V<,Oi
%aaB_b)a#suO@_Y>&&LHW*\S>ZeWGL9NgC4rVBE+16gjnLTeae[G%BbW24%KbeOtF/&dGg(CIP$/`k+)FjY5qY_J\0ONUFQ].Z:2G
%=e'l(@Y^SM*.DG]l\:*B=]aVDNE]\-:rL>1PeVuGQ-D9s5mj8_eP3L?bc+B]<45Sr(o(m!XX0H/Q'SF8gY"+>&:s!1a!bH/E$b?O
%F.X[b6[^6/a%)dDRr<HP"2j<Q17^ZZT#H-:A-p'M7cBE`6!Gb]i(Ihn,0K,)VNY2%#NN#$*0W5V?2I?I;7l9',/%65W'\Xi[*L0S
%ZqMd8X)0]oM$$4GA=3j"&aGYSoAEdmkNO6?gn0tXISE/eSSr/K;bG;s=0e1`L,4-9`A=NpFbl7&]QAu<Y#(&CCm5^-TLb$pIg9ri
%^iEf^qn)n%J,K8;s71[<o?Vp^kC<Gs5Q:J.rU:n:q`jV#JF(Dhs7kLOp2ALms6eeEn;mVBDu\sts7l7/rr2qcs6Up-jhLifa8bh1
%5QCN=Qf7E4o,n"s:]KP&J,JL0nY\VOmGIij^]!^&s3hL.r0Mp/f>%7R07Wiu^AcRls7GJ=rS(]Yp!8-aiSXXlJ,Q"Di1bG3hu2@q
%r29SlDu\sL"1(MF9E~>
%AI9_PrivateDataEnd
